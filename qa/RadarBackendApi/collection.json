{
	"id": "233e1a54-1419-f637-4f26-8937594b4e67",
	"name": "RadarBackend(DEV)",
	"description": "",
	"order": [
		"8a6f3ddd-3d10-d4f4-3f73-58e21273c9a7",
		"de8484a0-8742-ecfc-7a4c-974b5bef6314",
		"9e0abd85-c2c6-d47f-9dea-0b93a87533ed",
		"7768e49f-d71c-b5d6-21ad-e27d342ca5ee",
		"22e83e1e-d9d0-6390-9f58-49c1d08705d5",
		"3c98ecef-9c91-3d8d-56e1-2427231c5407",
		"64ec1896-8ce8-a5a4-aee4-02dd33c5fb3a",
		"e7497910-4464-0552-a855-4278237a0cc9",
		"ace5c8cc-0bd1-1ffc-defd-a8b6cd0345ec",
		"b0450227-6712-ad04-584c-3f5a7767b0bc",
		"3b5fc46a-a96a-af50-9195-bace7dee4533",
		"8283e013-fdfd-b007-2497-2907aebae71b",
		"537e42f3-2db7-03b0-318e-2e02cbd45fef",
		"db596250-2825-3dc2-6869-2d7442f711fa",
		"6269e72a-007f-3224-8f4b-f1ee75d1bf90",
		"96e6f65c-4780-5e4d-394e-9f0e4cf1ba00",
		"ac131cf7-16a4-84ba-8d79-7f689fa76edd",
		"8e23089a-eb64-e661-32fb-78e6e5e41399",
		"4067a8de-c3cc-379a-042c-f7ffb8f98c30",
		"a5836b2f-1350-6881-aab9-962a8b3905a1",
		"cb90d63b-1cc1-6a6f-775c-79875da9410b",
		"59b386c7-cd18-7575-8087-e08ce8e771d9",
		"a4726710-11eb-8b5f-889c-14a9392857c6"
	],
	"folders": [],
	"timestamp": 1494232547283,
	"owner": "1802157",
	"public": false,
	"requests": [
		{
			"id": "22e83e1e-d9d0-6390-9f58-49c1d08705d5",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/coverity/CoverityResults?BuildRecordId={{coverityGET}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody); \ntests[\"Response body has content\"] = (responseBody.length > 2);\n\ntest_schema = {\n  \n        \"items\":{\n                  \n                    \"properties\": {         \n                    \"CoverityResultId\": { \"type\": \"integer\"},\n                    \"BuildRecordId\": { \"type\": \"integer\"},\n    \t\t        \"FilesAnalyzed\": { \"type\": \"integer\" },\n    \t\t        \"TotalLOCAnalyzed\": { \"type\": \"integer\" },\n                    \"FunctionsAnalyzed\": { \"type\": \"integer\" },\n    \t\t        \"PathsAnalyzed\": { \"type\": \"integer\" },\n    \t\t        \"Duration\": { \"type\": \"string\" },\n    \t\t        \"URL\": { \"type\": \"string\" },\n    \t\t        \"NewDefectsFound\": { \"type\": \"integer\"},\n                    \"OutstandingDefectsFound\": {\"type\": \"integer\"},\n    \t\t        \"DefectsList\": { \"type\": [\"array\",\"null\"] }\n                    }\n        }   \n    };\n\ntests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);\nconsole.log(\"Validation errors: \", tv4.error);\n\ncoverityGETInc = environment.coverityGETNum++;\npostman.setEnvironmentVariable(\"coverityGET\", environment.coverityGETNum );\npostman.setEnvironmentVariable(\"coverityGETNum\", coverityGETInc + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493310588286,
			"name": "CoverityResults(GET)",
			"description": "Purpose: This allows the retrieval of Coverity results for a specific build record.\r\n\r\nNotes\r\n\r\n•\tIf there isn’t a build for the build record ID passed, an empty response is returned\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "b79465cf-2c26-c3a3-46a2-977dae769924"
		},
		{
			"id": "3b5fc46a-a96a-af50-9195-bace7dee4533",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestoneProgressions?BuildRecordId={{progressionGET}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody); \nvar listLength  = jsonData.length;\n\ntest_str = { \"items\":{\"type\" : \"string\"} };\ntest_int = { \"items\":{\"type\" : \"integer\"}};\n   \nfor( var i = 0 ; i < listLength; i ++)  {\n \n    var strings = [jsonData[i].BuildMilestoneName];\n    var integers = [jsonData[i].BuildMileStoneId, jsonData[i].BuildMileStoneLevel];\n    tests[\"Valid Schema Milestone \" + i + \" Pass\" ] = (tv4.validate(integers, test_int) && tv4.validate(strings, test_str));\n\n}\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response body has content\"] = (responseBody.length > 2);\ntests[\"Valid Build RecordId\"] =! responseBody.has(\"Object reference not set\");\n\nprogressionGETInc = environment.progressionGETNum++;\npostman.setEnvironmentVariable(\"progressionGET\", environment.progressionGETNum );\npostman.setEnvironmentVariable(\"progressionGETNum\", progressionGETInc + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493310756017,
			"name": "BuildMilestoneProgressions",
			"description": "Purpose: This will return a JSON representation of the build milestones to which this build record ID is allowed to progress from its current milestone.\r\n\r\nError Codes\r\n\r\n•\tHTTP 500 if an error occurs\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "5291251d-dc3c-98c2-d98a-1a23b22ee0f4"
		},
		{
			"id": "3c98ecef-9c91-3d8d-56e1-2427231c5407",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/verdir/VerDirResults",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nif(responseBody.length > 2){\nvar jsonData = JSON.parse(responseBody);\ntest_schema = {\n          \"items\":{\n                    \"properties\": {         \n                    \"Error\": { \"type\": \"string\"}\n                    }\n        }   \n    };\n\ntests[\"Valid BuildRecordId sent\"] = !(tv4.validate(jsonData, test_schema));\nconsole.log(\"Validation errors: \", tv4.error);\n}\n\nVerDirIncrement = environment.verDirNum++;\npostman.setEnvironmentVariable(\"myVerDirBuildID\", environment.verDirNum );\npostman.setEnvironmentVariable(\"verDirNum\", VerDirIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493301367182,
			"name": "VerDirResults",
			"description": "Purpose: This adds results for VerDir. It will potentially update two tables, VerDirResults and VerDirFailures (only if there are failures to report).\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\n\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\"Error\":\"Expected a non-null integer for property: 'BuildRecordID'\"}\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n\r\nNotes\r\n\r\n•\tFor each error for a particular file, a new row will be added in the VerDirFailures table.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"rawModeData": "{ \r\n  \"BuildRecordID\": {{myVerDirBuildID}},\r\n  \"BuildNumber\": \"100\",\r\n  \"FilesAnalyzed\": \"10\",\r\n  \"FailureCount\": \"5\",\r\n  \"Status\": \"Fail\",\r\n  \r\n  \"FailureList\": [\r\n    \r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains   unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\PackagingEspSetup\\\\vcredist\\\\vc_redist2015.x86.exe\",\r\n    \"errors\": [ \"Company Name doesn't contain McAfee,  Intel Corporation, or Intel Security\", \"Signature checks excluded  (disabled by command line switch)\" ]},\r\n{\"file\":\"BUILD\\\\ESP\\\\BusinessObjects\\\\MaPkgSupplier\\\\SamplePkg\\\\build\\\\zip.exe\",\r\n    \"errors\": [ \"No version information\", \"ASLR compatibility flag isn't turned on\", \"DEP compatibility flag isn't turned on\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\BLSvcHost.exe\",\r\n    \"errors\": [ \"No version information\" ]}\r\n    ]\r\n}"
		},
		{
			"id": "4067a8de-c3cc-379a-042c-f7ffb8f98c30",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/Test/TestResults?BuildRecordId= {{testResultsGET}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody); \ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response body has content\"] = (responseBody.length > 2);\n\ntest_schema = {\n  \n        \"items\":{\n                  \n                    \"properties\": {         \n                    \"TestRecordId\": { \"type\": \"integer\"},\n                    \"BuildRecordID\": { \"type\": \"integer\"},\n                    \"TestType\": { \"type\": \"string\" },\n    \t\t        \"URL\": { \"type\": \"string\" },\n    \t\t        \"Platform\": { \"type\": \"string\"},\n                    \"Architecture\": { \"type\": \"string\"},\n    \t\t        \"Result\": { \"type\": \"string\" },\n    \t\t        \"TestSuites\": { \"type\": [\"array\",\"null\"] }\n                }\n            }   \n        };\ntests[\"Valid response schema\"] = tv4.validate(jsonData, test_schema);\nif(tv4.validate(jsonData, test_schema)){\n    \n    var listLength  = jsonData.length;\n   \n        for( var i = 0 ; i < listLength; i ++)  {\n        \n            tests[\"Valid Data in response array element\" + i] = tv4.validate(jsonData[i], test_schema );\n        }\n\n}\n\ntestResultsInc = environment.testResultsGETNum++;\npostman.setEnvironmentVariable(\"testResultsGET\", environment.testResultsGETNum);\npostman.setEnvironmentVariable(\"testResultsGETNum\", testResultsInc + 1);\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493378044713,
			"name": "TestResults",
			"description": "Purpose: This allows the retrieval of the Test case results for the given BuildRecordId.\r\n\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "909d4c3d-1e73-cd33-fff5-c2fbb6469971"
		},
		{
			"id": "537e42f3-2db7-03b0-318e-2e02cbd45fef",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildResult",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Valid build Record ID\"] =! responseBody.has(\"Can't find a build record\");\n\nresultIncrement = environment.resultNum++;\npostman.setEnvironmentVariable(\"myBuildResultNum\", environment.resultNum);\npostman.setEnvironmentVariable(\"resultNum\", resultIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493304060037,
			"name": "BuildResult",
			"description": "Purpose: This add the final result for a build in the build records table.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\r\n   \"Error\":\"Expected a non-null integer for property: 'BuildRecordID'\"\r\n}\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "4d0f540c-4244-df6b-1184-3f9815c47322",
			"rawModeData": "{ \r\n  \"BuildRecordID\": {{myBuildResultNum}},\r\n  \"BuildResult\": \"Passed\",\r\n  \"BuildComment\": \"No Quality Gate Violations.\"\r\n}"
		},
		{
			"id": "59b386c7-cd18-7575-8087-e08ce8e771d9",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/Quality/QualityGate",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Valid Quality Gate Name\"] = !responseBody.has(\"An active Quality Gate with this name already exists\");\n\nqualityIncrement = environment.qualityGateNum++;\npostman.setEnvironmentVariable(\"myQualityGateName\",  environment.qualityGateNum );\npostman.setEnvironmentVariable(\"qualityGateNum\", qualityIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493306840564,
			"name": "QualityGate(Post)",
			"description": "Purpose: This is used to add new Quality Gates to the database.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\n\r\nError Codes\r\n\r\n•\tHTTP 400 if an error occurs, with a descriptive error message.\r\n{\"Error\": \"An active Quality Gate with this name already exists - exiting.\"}\r\n\r\nNotes\r\n\r\n•\tThe ‘Name’ attribute must be unique. Insertion will fail otherwise. Name cannot be changed later, it is used as a unique identifier for each quality gate.\r\n\r\n\r\n\r\n\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "39bb0210-6f50-556b-9057-6559c8df56a5",
			"rawModeData": "{ \r\n  \"Name\": {{myQualityGateName}},\r\n  \"Description\": \"Radar Automated API Testing\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"15\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
		},
		{
			"id": "6269e72a-007f-3224-8f4b-f1ee75d1bf90",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildSearch?solutionName=Engineering%20Services%20Tools&solutionVersion=1.0.0&productName=Radar&productVersion=1.0&componentName=Radar_API_Tester&componentVersion=1.0.0&milestone=Build Passed&useExactMilestone=false",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody);\ntests[\"Valid build Information\"] =! responseBody.has(\"Could not find build\");\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntest_str = { \"items\":{\"type\" : [\"string\",\"null\"]} };\ntest_int = { \"items\":{\"type\" : \"integer\"}};\nvar strings = [jsonData.ArtifactoryUrl];\nvar integers = [jsonData.BuildRecordId, jsonData.BuildNumber];\n\ntests[\"Valid Response schema \"] = (tv4.validate(strings, test_str) && tv4.validate(integers, test_int)); \n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493368546709,
			"name": "BuildSearch",
			"description": "Purpose: This is used by Orbit to search for the latest build of the given component with the given milestone. Note that if useExactMilestone is set to true, then we’ll just take the latest build that matches the given milestone. If it is set to false then we will take the build that meets the criteria that is at the highest build milestone.\r\n\r\nError Codes\r\n\r\n•\tHTTP 500 if an error occurs.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "3cfb504d-133a-a18c-f798-bdb1d3dab4a9"
		},
		{
			"id": "64ec1896-8ce8-a5a4-aee4-02dd33c5fb3a",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/verdir/VerDirResults?BuildRecordId={{verDirGET}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody); \ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response body has content\"] = (responseBody.length > 2);\ntest_schema = {\n  \n        \"items\":{\n                    \"properties\": {         \n                    \"BuildRecordId\": { \"type\": \"integer\"},\n                    \"FilesAnalyzed\": { \"type\": \"integer\"},\n    \t\t        \"FailureCount\": { \"type\": \"integer\" },\n    \t\t        \"Status\": { \"type\": \"string\" },\n                    \"FailureList\": { \"type\": [\"array\",\"null\"] }\n                    }\n        }   \n    };\n\ntests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);\nconsole.log(\"Validation errors: \", tv4.error);\n\nverDirGetInc = environment.verDirGETNum++;\npostman.setEnvironmentVariable(\"verDirGET\", environment.verDirGETNum );\npostman.setEnvironmentVariable(\"verDirGETNum\", verDirGetInc + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493310263676,
			"name": "VerDirResults(GET)",
			"description": "Purpose: This returns the VerDir results for the build record ID passed in the query string (i.e. 1 in the above example.\r\n\r\nNotes\r\n•\tIf no VerDir results exist for that build, an empty response is returned.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "e6343f5b-7795-ab7f-1a93-b5347ba181b5"
		},
		{
			"id": "7768e49f-d71c-b5d6-21ad-e27d342ca5ee",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/coverity/CoverityResults",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Valid Build Record ID {exists in DB}\"] = !responseBody.has(\"Expected\");\n\nif(!responseBody.has(\"Expected\")){\ntests[\"Valid Unused Build Record ID\"] = !responseBody.has(\"Coverity results already exist\");\n}\n\ncoverityIncrement = environment.coverityNum++;\npostman.setEnvironmentVariable(\"myCoverityBuildID\", environment.coverityNum);\npostman.setEnvironmentVariable(\"coverityNum\", coverityIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493301757955,
			"name": "CoverityResults",
			"description": "Purpose: This allows the addition of Coverity results. These are tied to specific build records.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\n\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\r\n   \"Error\":\"Expected a non-null integer for property: 'BuildRecordID'\"\r\n}\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"rawModeData": "{ \r\n  \"BuildRecordID\":{{myCoverityBuildID}},\r\n  \"FilesAnalyzed\": \"3\",\r\n  \"TotalLOCAnalyzed\": \"3143\",\r\n  \"FunctionsAnalyzed\": \"211\",\r\n  \"PathsAnalyzed\": \"23\",\r\n  \"Duration\": \"00:00:12\",\r\n  \"URL\": \"http://beaappcov1.corp.nai.org\",\r\n  \"NewDefectsFound\": \"3\",\r\n  \"OutstandingDefects\": \"9\",\r\n  \r\n  \"DefectsList\": [\r\n    \r\n    {\r\n      \"Cid\": \"120435\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"BUFFER_OVERFLOW\",\r\n      \"Type\": \"Buffer overflow\"\r\n    },\r\n     \r\n    {\r\n      \"Cid\": \"120436\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    },\r\n    \r\n    {\r\n      \"Cid\": \"120437\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\foo.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    }\r\n\r\n    ]\r\n}"
		},
		{
			"id": "8283e013-fdfd-b007-2497-2907aebae71b",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestoneHistory?BuildRecordId={{historyGet}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody); \ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response body has content\"] = (responseBody.length > 2);\ntest_schema = {\n  \n        \"items\":{\n                  \n                    \"properties\": {         \n                    \"BuildMilestonesRecordId\": { \"type\": \"integer\"},    \n                    \"BuildRecordId\": { \"type\": \"integer\"},\n                    \"PreviousBuildMilestone\": { \"type\": \"string\" },\n    \t\t        \"NewBuildMilestone\": { \"type\": \"string\" },\n    \t\t        \"Username\": { \"type\": \"string\"},\n                    \"Comment\": { \"type\": \"string\"},\n    \t\t        \"Timestamp\": { \"type\": \"string\" }}\n        }   \n    };\n\ntests[\"Response sche,a valid\"] = tv4.validate(jsonData, test_schema);\nconsole.log(\"Validation errors: \", tv4.error);\n\nhistoryGETInc = environment.historyGETNum++;\npostman.setEnvironmentVariable(\"historyGet\", environment.historyGETNum );\npostman.setEnvironmentVariable(\"historyGETNum\", historyGETInc + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493310582380,
			"name": "BuildMilestoneHistory",
			"description": "Purpose: This will return a JSON representation of the build milestone history of the given build record ID.\r\n\r\nError Codes\r\n\r\n•\tHTTP 500 if an error occurs.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "762ae037-a974-e832-d8c3-1a011574c6a3"
		},
		{
			"id": "8a6f3ddd-3d10-d4f4-3f73-58e21273c9a7",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildRecord",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody);\n\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nif(responseCode.code ===200 ){\n    tests[\"Unique Build Number\"] =! responseBody.has(\"A record already seems to exist \");\n}\ntests[\"Build Record Returned\"] = responseBody.has(\"BuildRecordID\");\n\nnum = environment.buildNum++;\npostman.setEnvironmentVariable(\"myBuildNumber\", environment.buildNum );\npostman.setEnvironmentVariable(\"buildNum\", num + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493807346959,
			"name": "BuildRecord",
			"description": "Purpose: Add data to the BuildRecords table. This is the high level record for a particular build. This would be called as the build is initiated.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 with JSON that lists the new ID of this record in the Radar system. This is the unique ‘BuildRecordID’ parameter that will need to be passed with all subsequent API calls, e.g.\r\n{\"BuildRecordID\":\"1\"}\r\n\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\"Error\":\"Expected a non-null integer for property: 'BuildNumber'\"}\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n\r\n\r\nNotes\r\n\r\n•\tThe following are validated as against what is in the database: Solution, SolutionVersion, Product, ProductVersion, Component, ComponentVersion. If these are not valid the server will return a HTTP 400 and a descriptive JSON error message, e.g.\r\n{\"Error\":\"Product Name specified does not exist in the database.\"}\r\n\r\n•\tError emails are available also.\r\n\r\n•\tEach BuildRecord is timestamped as it is added to the\r\ndatabase (using the current server time).\r\n\r\n•\tValues for BuildMilestone are pre-defined in a BuildMilestones table in the database. Passing an invalid value for build milestone will result in an error response similar to above.\r\n\r\n•\tYou cannot submit data for the same build number twice. E.g. if there are results for build 100 already, you will receive an error message.\r\n\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "8c2d803e-769d-f50c-74e0-36db9a15d6e1",
			"rawModeData": "{ \r\n  \"Solution\": \"Engineering Services Tools\",\r\n  \"SolutionVersion\": \"1.0.0\",\r\n  \"Product\": \"Radar\",\r\n  \"ProductVersion\": \"1.0\",\r\n  \"Component\": \"Radar_API_Tester\",\r\n  \"ComponentVersion\": \"1.0.0\",\r\n  \"BuildNumber\": {{myBuildNumber}},\r\n  \"BuildMilestone\": \"Queued\",\r\n  \"Branch\": \"trunk\",\r\n  \"URL\": \"http://build.orbit.intel.com/job/ESP/job/ESP_CHAIN/job/ESP_UX/100\"\r\n}"
		},
		{
			"id": "8e23089a-eb64-e661-32fb-78e6e5e41399",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/test/TestRecordResult",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"TestRecordId valid\"] = !responseBody.has(\"Can't find a test record for the test record ID\");\n\ntestRecordIncrement = environment.testRecordResultNum++;\npostman.setEnvironmentVariable(\"myTestRecordIDResult\", environment.testRecordResultNum);\npostman.setEnvironmentVariable(\"testRecordResultNum\", testRecordIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493980375199,
			"name": "TestRecordResult",
			"description": "Purpose: This adds the overall result for a test record. This would be called after adding all the test case results. It would need to be enumerated by the test automation.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue.\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n\r\nNotes\r\n\r\nThe following are the only valid values for ‘TestResults’ (case is irrelevant) – passed, failed, pending.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "df9f27c2-f117-f4c6-c98b-babec468e08b",
			"rawModeData": "{\r\n  \"TestRecordID\": {{myTestRecordIDResult}},\r\n  \"TestResult\": \"Failed\"\r\n}"
		},
		{
			"id": "96e6f65c-4780-5e4d-394e-9f0e4cf1ba00",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/Test/TestRecord",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nif(responseCode.code === 200){\ntests[\"Valid test platform\"] =! responseBody.has(\"Invalid test platform value passed\");}\n\ntestIncrement = environment.testNum++;\npostman.setEnvironmentVariable(\"myTestRecordBuildID\", environment.testNum);\npostman.setEnvironmentVariable(\"testNum\", testIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493305024503,
			"name": "TestRecord",
			"description": "Purpose: This adds a test record to the database for a test run, and the suites that are to be executed. TestCaseResult then can be used to add individual test case results for this test record.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully, along with a unique TestRecordID to be used on all subsequent calls of TestCaseResult, which is used to add individual test case results.\r\n{\r\n\"TestRecordId\": \"3\"\r\n}\r\n\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\r\n   \"Error\":\"Expected a non-null integer for property: 'BuildRecordID'\"\r\n}\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n\r\n\r\nNotes\r\n\r\n•\tBuildRecordID is the unique ID of this build record in the Radar database (not the build number or anything else). Please talk to Paul/Jimmy/Mark if you don’t understand this.\r\n\r\n•\tThis API adds the top-level record of a test run and stores the information about the suites. TestCaseResult should be used for storing individual test case results as they run.\r\n\r\n•\tValid values for Platform are currently (case is irrelevant) – Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 10 November Update, Windows 10 Anniversary Update, OSX, Linux.\r\n\r\n•\tValue values for Architecture are currently (case is irrelevant) – x86, x64.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "3edf3135-e9d8-c1e8-c6b7-79e3def4f8db",
			"rawModeData": "{\r\n\t\"BuildRecordID\": {{myTestRecordBuildID}},\r\n\t\"TestType\": \"BVT\",\r\n    \"Platform\": \"Linux\",\r\n    \"Architecture\": \"x86\",\r\n\t\"URL\": \"http://your.test.rig/results/build/100/bvt\",\r\n\r\n\t\"Suites\": [\r\n\r\n\t\t{\r\n\t\t\t\"TestSuiteName\": \"GTI\",\r\n\t\t\t\"TotalNumberOfTests\": \"100\"\r\n\t\t}, \r\n        {\r\n\t\t\t\"TestSuiteName\": \"Logger\",\r\n\t\t\t\"TotalNumberOfTests\": \"14\"\r\n\t\t}\r\n\r\n\t]\r\n}"
		},
		{
			"id": "9e0abd85-c2c6-d47f-9dea-0b93a87533ed",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildStep",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Valid BuildRecord Id added\"] =! responseBody.has(\"Expected a non-null integer for property: 'BuildRecordID'\");\n\nbuildStepIncrement = environment.buildRecordNum++;\npostman.setEnvironmentVariable(\"myBuildRecordId\", environment.buildRecordNum );\npostman.setEnvironmentVariable(\"buildRecordNum\", buildStepIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493980361593,
			"name": "BuildStep",
			"description": "Purpose: This is used to add build step data to the BuildSteps table, which contains the steps that happened within a particular build. This would be called as each step in the build completes.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\n\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\r\n   \"Error\":\"Expected a non-null integer for property: 'BuildRecordID'\"\r\n}\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n\r\nNotes\r\n\r\n•\tStep names can be anything you want. Step results also. (May want to standardize step results).\r\n\r\n•\tEach BuildStep is timestamped as it is added to the database (using the current server time).\r\n\r\n•\tThe overall build milestone can be updated at any time by calling the BuildMilestone function (described later in this document).\r\n\r\n•\tIf the step already exists for the given build record Id, then the result is just updated rather than a new step created.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "6424e330-9bb6-7173-a23d-bf8b74f84275",
			"rawModeData": "{\r\n  \"BuildRecordId\": {{myBuildRecordId}},\r\n  \"StepName\": \"Compilation\",\r\n  \"StepResult\": \"Pass\"\r\n}"
		},
		{
			"id": "a4726710-11eb-8b5f-889c-14a9392857c6",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/Quality/QualityGateUpdate",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Quality gate specified exists\"] = !responseBody.has(\"The Quality Gate specified to update doesn't seem to exist \");\n\nupdateIncrement = environment.updateGateNum++;\npostman.setEnvironmentVariable(\"myQualityGateUpdate\",  environment.updateGateNum );\npostman.setEnvironmentVariable(\"updateGateNum\", updateIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493307097819,
			"name": "QualityGateUpdate",
			"description": "Purpose: This is used to update an existing quality gate in the database.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\nError Codes\r\n\r\n•\tHTTP 400 if an error occurs, with a descriptive error message.\r\n{\"Error\": \"The Quality Gate specified to update doesn't seem to exist - exiting.\"}\r\n\r\nNotes\r\n\r\n•\tNew rows are added each time a quality gate is updated – previous records are marked as inactive and retained. This is because these may have been used in previous builds, and we’ll need to retain a record of what the values were at this time.\r\n\r\n•\tRight now, Quality Gate names cannot be changed after they are created. This can be fixed a future version if required. Quality Gate names need to be unique.\r\n\r\n•\tFIXME: Tie up Quality Gates to Build Records later once we are ready.\r\n\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "4911c2d6-970b-fe7c-684d-381840a0aaa2",
			"rawModeData": "{ \r\n  \"Name\": {{myQualityGateUpdate}},\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"10\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
		},
		{
			"id": "a5836b2f-1350-6881-aab9-962a8b3905a1",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestone",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493309618524,
			"name": "BuildMilestone(GET)",
			"description": "Purpose: This will return a list of the active build milestones.\r\n\r\nError Codes\r\n\r\n•\tHTTP 500 if an error occurs.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "25f92c4a-ee18-59cb-233d-8789f4146ea1"
		},
		{
			"id": "ac131cf7-16a4-84ba-8d79-7f689fa76edd",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/Test/TestCaseResult",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Test Record ID Valid\"] =! responseBody.has(\"Test Suite specified was not found\");\n\ntestCaseIncrement = environment.testRecordNum++;\npostman.setEnvironmentVariable(\"myTestRecordID\", environment.testRecordNum);\npostman.setEnvironmentVariable(\"testRecordNum\", testCaseIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493305381475,
			"name": "TestCaseResult",
			"description": "Purpose: This is used in conjunction with TestRecord to add test results to the database. This requires a unique TestRecordId to be passed (returned from TestRecord) with each call. This is what ties tests to build records.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if test case result was added successfully.\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\r\n   \"Error\":\"Expected a non-null integer for property: 'BuildRecordID'\"\r\n}\r\n\r\n•\tHTTP 400 is also returned if the test suite specified does not exist in the database. This should have been passed in TestRecord.\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "d5b736a7-bb76-08e7-73c2-40cb7b246d0d",
			"rawModeData": "{\r\n\t\"TestRecordID\": {{myTestRecordID}},\r\n\t\"TestSuiteName\": \"GTI\",\r\n\t\"TestCaseName\": \"Test good file\",\r\n    \"TestCaseResult\": \"Pass\"\r\n}"
		},
		{
			"id": "ace5c8cc-0bd1-1ffc-defd-a8b6cd0345ec",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/ArtifactoryUrl",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\ntests[\"Valid Build Record\"] =! responseBody.has(\"Can't find a build record \");\n\nartifactoryIncrement = environment.artifactoryNum++;\npostman.setEnvironmentVariable(\"myArtifactoryBuildID\", environment.artifactoryNum);\npostman.setEnvironmentVariable(\"artifactoryNum\", artifactoryIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493302154140,
			"name": "ArtifactoryUrl",
			"description": "Purpose: This can be used to add an Artifactory link to the BuildRecords table for a build once the build is completed. This can be used by downstream teams to get the link to build artefacts for testing etc.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue, e.g.\r\n{\r\n   \"Error\":\"Expected a non-null integer for property: 'BuildRecordID'\"\r\n}\r\n\r\n•\tHTTP 500 – An error occurred on the server, in this instance the message from the stack track is passed back in a JSON response similar to above.\r\n\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "eb326b0c-8ee2-cdcc-5dd6-23ec1db4eed1",
			"rawModeData": "{\r\n  \"BuildRecordID\": {{myArtifactoryBuildID}},\r\n  \"ArtifactoryUrl\": \"http://artifactoryurl/build43\"\r\n}"
		},
		{
			"id": "b0450227-6712-ad04-584c-3f5a7767b0bc",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestone",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nif(responseCode.code === 200){\n    \ntests[\"Correct progressions between milestones\"] =! responseBody.has(\"You cannot progress\");\n\ntests[\"Correct build Record ID\"] =! responseBody.has(\"Could not get the build milestone ID\");\n    \n}\n\nmilestoneIncrement = environment.milestoneNum++;\npostman.setEnvironmentVariable(\"myBuildMilestoneID\", environment.milestoneNum);\npostman.setEnvironmentVariable(\"milestoneNum\", milestoneIncrement + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493303690543,
			"name": "BuildMilestone",
			"description": "Purpose: Updates a build (i.e. a record in BuildRecords) to a particular milestone. History of previous milestones is maintained.\r\n\r\nReturns\r\n\r\n•\tHTTP 200 if the data was added successfully.\r\n\r\nError Codes\r\n\r\n•\tHTTP 400 – Data passed was invalid. A descriptive JSON is returned outlining the issue.\r\n\r\n•\tHTTP 400 – If this operation is invalid, i.e. if you are trying to go back to a previous milestone. You can only move forwards.\r\n\r\n•\tHTTP 500 – An error occurred on the server.\r\n\r\nNotes\r\n•\tValues for BuildMilestone are pre-defined in a BuildMilestones table in the database. Passing an invalid value for build milestone will result in HTTP 400.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "227a0edc-6afe-265b-c66c-d8828a33ea89",
			"rawModeData": "{\r\n  \"BuildRecordID\": {{myBuildMilestoneID}},\r\n  \"BuildMilestone\": \"Build Passed\",\r\n  \"Username\": \"jcollin1\",\r\n  \"Comment\": \"Test comment\"\r\n}"
		},
		{
			"id": "cb90d63b-1cc1-6a6f-775c-79875da9410b",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/Quality/QualityGates",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody); \ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response body has content\"] = (responseBody.length > 2);\ntest_schema ={\n  \n        \"items\":{\n                  \n                    \"properties\": {         \n                    \"QualityGateId\": { \"type\": \"integer\"},\n                    \"Name\": { \"type\": \"string\"},\n    \t\t        \"Description\": { \"type\": \"string\" },\n    \t\t        \"Type\": { \"type\": \"string\" },\n                    \"Pass\": { \"type\": \"integer\" },\n    \t\t        \"Fail\": { \"type\": \"integer\" },\n    \t\t        \"Min\": { \"type\": \"integer\" },\n    \t\t        \"Max\": { \"type\": \"integer\"},\n                    \"Active\": { \"type\": \"integer\"}\n                    }\n        }   \n    };\n\ntests[\"Valid response schema\"] = tv4.validate(jsonData[0], test_schema);\n\nfor (var i =0; i < jsonData.length ; i ++){\n    tests[\"correct list item \" + i] =  tv4.validate(jsonData[i], test_schema);\n}\nconsole.log(\"Validation errors: \", tv4.error);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1492595081435,
			"name": "QualityGates",
			"description": "Purpose: This is used to retrieve quality gates from the Radar database as JSON for consumption in the build system or Radar UI.\r\n\r\nError Codes\r\n\r\n•\tHTTP 500 if an error occurs\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "68f39abb-1f5e-782b-3dc2-844d9d5a2579"
		},
		{
			"id": "db596250-2825-3dc2-6869-2d7442f711fa",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReport?BuildRecordId={{highLevelGet}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody); \ntests[\"Status code is 200\"] = responseCode.code === 200;\ntests[\"Response body has content\"] = (responseBody.length > 2);\ntest_schema = {\n  \n        \"items\":{\n                  \n                    \"properties\": {         \n                    \"BuildRecordID\": { \"type\": \"integer\"},\n                    \"BuildNumber\": { \"type\": \"integer\" },\n    \t\t        \"Branch\": { \"type\": \"string\" },\n    \t\t        \"MileStone\": {\"type\": \"string\"},\n    \t\t        \"BuildResult\": { \"type\": \"string\" },\n    \t\t        \"BuildStartTime\": { \"type\": \"string\"},\n                    \"OpenBugzillaDefects\": { \"type\": [\"integer\", \"null\"]},\n    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },\n    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },\n    \t\t        \"TestingResult\": { \"type\": \"string\" }\n                    }\n        }   \n    };\n    \ntests[\"Valid response schema\"] = tv4.validate(jsonData, test_schema);\nconsole.log(\"Validation errors: \", tv4.error);\n\nhighLevelGETInc = environment.highLevelGetNum++;\npostman.setEnvironmentVariable(\"highLevelGet\", environment.highLevelGetNum );\npostman.setEnvironmentVariable(\"highLevelGetNum\", highLevelGETInc + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493310962173,
			"name": "HighLevelBuildReport(BuildRecordID)",
			"description": "Purpose: This allows the retrieval of a high level KPI summary for a particular build.",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "8463d255-9565-223e-eafe-60cc4ce92d0e"
		},
		{
			"id": "de8484a0-8742-ecfc-7a4c-974b5bef6314",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildRecord?buildRecordId={{buildRecordIDGET}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "var jsonData = JSON.parse(responseBody); \ntests[\"Status code is 200\"] = responseCode.code === 200;\nvar listLength  = jsonData.length;\ntests[\"Response body has content\"] = (responseBody.length > 2);\ntest_schema = {\n  \n        \"items\":{\n                  \n                    \"properties\": {         \n                    \"BuildRecordID\": { \"type\": \"integer\"},\n                    \"SolutionID\": { \"type\": \"integer\"},\n    \t\t        \"ProductID\": { \"type\": \"integer\" },\n    \t\t        \"ComponentID\": { \"type\": \"integer\" },\n                    \"BuildNumber\": { \"type\": \"integer\" },\n    \t\t        \"BuildMilestone\": { \"type\": \"string\" },\n    \t\t        \"Branch\": { \"type\": \"string\" },\n    \t\t        \"Timestamp\": { \"type\": \"string\"},\n                    \"BuildURL\": { \"type\": \"string\"},\n    \t\t        \"ArtifactoryURL\": { \"type\": [\"string\",\"null\"] },\n    \t\t        \"BuildResult\": { \"type\": [\"string\",\"null\"] },\n                    \"BuildComment\": { \"type\": [\"string\",\"null\"] },\n    \t\t        \"CodeCoverage\": { \"type\": [\"integer\", \"null\"] },\n    \t\t        \"OpenBugzillaDefects\": { \"type\": [\"integer\", \"null\"]},\n    \t\t        \"BuildSteps\": { \"type\": [\"array\",\"null\"] }\n                    }\n        }   \n    };\n    \n\ntests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);\nconsole.log(\"Validation errors: \", tv4.error);\n\nrecordGetInc = environment.buildGETnum++;\npostman.setEnvironmentVariable(\"buildRecordIDGET\", environment.buildGETnum );\npostman.setEnvironmentVariable(\"buildGETnum\", recordGetInc + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493309994997,
			"name": "BuildRecord(GET)",
			"description": "Purpose: Given a build ID, this will return a JSON response listing the build metadata and a list of the associated build steps and their results.\r\n\r\nNotes\r\n•\tIf there isn’t a build for the build record ID passed, an empty response is returned.\r\n",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": []
		},
		{
			"id": "e7497910-4464-0552-a855-4278237a0cc9",
			"headers": "Content-Type: application/json\n",
			"url": "http://devradar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReport?solutionName=Engineering%20Services%20Tools&solutionVersion=1.0.0&productName=Radar&productVersion=1.0&componentName=Radar_API_Tester&componentVersion=1.0.0&buildNumber={{highLevelBuildReportGET}}&branch=trunk",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Specified parameters correct\"] =! responseBody.has(\"Could not find a record of a build\");\ntests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody); \n\ntests[\"Response body has content\"] = (responseBody.length > 2);\ntest_schema = {\n  \n        \"items\":{\n                  \n                    \"properties\": {         \n                    \"BuildRecordID\": { \"type\": \"integer\"},\n                    \"BuildNumber\": { \"type\": \"integer\" },\n    \t\t        \"Branch\": { \"type\": \"string\" },\n    \t\t        \"MileStone\": {\"type\": \"string\"},\n    \t\t        \"BuildResult\": { \"type\": \"string\" },\n    \t\t        \"BuildStartTime\": { \"type\": \"string\"},\n                    \"OpenBugzillaDefects\": { \"type\": \"integer\"},\n    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },\n    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },\n    \t\t        \"TestingResult\": { \"type\": \"string\" }\n                    }\n        }   \n    };\nif(responseCode.code === 200){\n    tests[\"Valid response schema\"] = tv4.validate(jsonData, test_schema);\n}\nconsole.log(\"Validation errors: \", tv4.error);\n\nhighLevelReportGETInc = environment.highlevelReportNum++;\npostman.setEnvironmentVariable(\"highLevelBuildReportGET\", environment.highlevelReportNum );\npostman.setEnvironmentVariable(\"highlevelReportNum\", highLevelReportGETInc + 1);",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1493368241420,
			"name": "HighLevelBuildReport",
			"description": "Purpose: This allows the retrieval of a high level KPI summary for a particular build.",
			"collectionId": "233e1a54-1419-f637-4f26-8937594b4e67",
			"responses": [],
			"isFromCollection": true,
			"collectionRequestId": "9bdfbc2f-7b66-68c6-66c4-a4003c0e6b9f"
		}
	]
}