{
  "variables": [],
  "info": {
    "name": "RadarBackend(LOCAL)",
    "_postman_id": "a0567104-bf80-ad33-a487-6ca5609d93df",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "5aeeb9e2-6be1-e3d9-69dc-c9f7f5480653",
      "name": "RadarBackend(local)",
      "description": "",
      "item": [
        {
          "_postman_id": "53d63835-e649-558b-1e54-4ffa73b6a1b1",
          "name": "BuildRecord",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Unique Build Number\"] =! responseBody.has(\"A record already seems to exist \");",
                  "",
                  "tests[\"Build Record Returned\"] = responseBody.has(\"BuildRecordID\")",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Solution\": \"Dynamic Endpoint\",\r\n  \"SolutionVersion\": \"1.0.0\",\r\n  \"Product\": \"ESP\",\r\n  \"ProductVersion\": \"11.0\",\r\n  \"Component\": \"ESP_UX\",\r\n  \"ComponentVersion\": \"11.0\",\r\n  \"BuildNumber\": \"112\",\r\n  \"BuildMilestone\": \"Queued\",\r\n  \"Branch\": \"trunk\",\r\n  \"URL\": \"http://build.orbit.intel.com/job/ESP/job/ESP_CHAIN/job/ESP_UX/101\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "6d63fccd-5276-5919-aeed-8f35fe4c1c81",
          "name": "BuildRecord(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "var listLength  = jsonData.length;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"SolutionID\": { \"type\": \"integer\"},",
                  "    \t\t        \"ProductID\": { \"type\": \"integer\" },",
                  "    \t\t        \"ComponentID\": { \"type\": \"integer\" },",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"BuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"Timestamp\": { \"type\": \"string\"},",
                  "                    \"BuildURL\": { \"type\": \"string\"},",
                  "    \t\t        \"ArtifactoryURL\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "                    \"BuildComment\": { \"type\": \"string\" },",
                  "    \t\t        \"CodeCoverage\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"BuildSteps\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "    ",
                  "",
                  "tests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildRecord?buildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "ed6c28c5-4dc1-c18e-f7de-d2cb5178a08e",
          "name": "BuildStep",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid BuildRecord Id added\"] =! responseBody.has(\"Expected a non-null integer for property: 'BuildRecordID'\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Build/BuildStep",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"2\",\r\n  \"StepName\": \"Checkout Source\",\r\n  \"StepResult\": \"Pass\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "2ac6b3a2-8791-5451-5e8f-629f7e849a20",
          "name": "VerDirResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "if(responseBody.length > 2){",
                  "var jsonData = JSON.parse(responseBody);",
                  "test_schema = {",
                  "          \"items\":{",
                  "                    \"properties\": {         ",
                  "                    \"Error\": { \"type\": \"string\"}",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Valid BuildRecordId sent\"] = !(tv4.validate(jsonData, test_schema));",
                  "console.log(\"Validation errors: \", tv4.error);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/verdir/VerDirResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"18\",\r\n  \"BuildNumber\": \"100\",\r\n  \"FilesAnalyzed\": \"156\",\r\n  \"FailureCount\": \"5\",\r\n  \"Status\": \"Fail\",\r\n  \"FailureList\": [\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains   unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\PackagingEspSetup\\\\vcredist\\\\vc_redist2015.x86.exe\",\r\n    \"errors\": [ \"Company Name doesn't contain McAfee,  Intel Corporation, or Intel Security\", \"Signature checks excluded  (disabled by command line switch)\" ]},\r\n{\"file\":\"BUILD\\\\ESP\\\\BusinessObjects\\\\MaPkgSupplier\\\\SamplePkg\\\\build\\\\zip.exe\",\r\n    \"errors\": [ \"No version information\", \"ASLR compatibility flag isn't turned on\", \"DEP compatibility flag isn't turned on\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\BLSvcHost.exe\",\r\n    \"errors\": [ \"No version information\" ]}\r\n    ]\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "bea5a80e-57dc-787a-3414-09c2009dc5a0",
          "name": "VerDirResults(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "                    \"FilesAnalyzed\": { \"type\": \"integer\"},",
                  "    \t\t        \"FailureCount\": { \"type\": \"integer\" },",
                  "    \t\t        \"Status\": { \"type\": \"string\" },",
                  "                    \"FailureList\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/verdir/VerDirResults?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "8959b6a3-7d9f-5564-61a8-aa95075db8e1",
          "name": "CoverityResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid Build Record ID {exists in DB}\"] = responseBody.has(\"Expected\");",
                  "",
                  "if(!responseBody.has(\"Expected\")){",
                  "tests[\"Valid Unused Build Record ID\"] = !responseBody.has(\"Coverity results already exist\");",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/coverity/CoverityResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"17\",\r\n  \"FilesAnalyzed\": \"3\",\r\n  \"TotalLOCAnalyzed\": \"3143\",\r\n  \"FunctionsAnalyzed\": \"211\",\r\n  \"PathsAnalyzed\": \"23\",\r\n  \"Duration\": \"00:00:12\",\r\n  \"URL\": \"http://beaappcov1.corp.nai.org\",\r\n  \"NewDefectsFound\": \"3\",\r\n  \"OutstandingDefects\": \"9\",\r\n\r\n  \"DefectsList\": [\r\n    \r\n    {\r\n      \"Cid\": \"120435\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"BUFFER_OVERFLOW\",\r\n      \"Type\": \"Buffer overflow\"\r\n    },\r\n     \r\n    {\r\n      \"Cid\": \"120436\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    },\r\n    \r\n    {\r\n      \"Cid\": \"120437\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\foo.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    }\r\n    ]\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "6eb63eea-be2b-383a-86c0-09ba718a3b47",
          "name": "CoverityResults(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"CoverityResultId\": { \"type\": \"integer\"},",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "    \t\t        \"FilesAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"TotalLOCAnalyzed\": { \"type\": \"integer\" },",
                  "                    \"FunctionsAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"PathsAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"Duration\": { \"type\": \"string\" },",
                  "    \t\t        \"URL\": { \"type\": \"string\" },",
                  "    \t\t        \"NewDefectsFound\": { \"type\": \"integer\"},",
                  "                    \"OutstandingDefectsFound\": {\"type\": \"integer\"},",
                  "    \t\t        \"DefectsList\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/coverity/CoverityResults?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "a037c3a5-68d4-c4dc-8571-6eed4248b428",
          "name": "ArtifactoryUrl",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid Build Record\"] =! responseBody.has(\"Can't find a build record \");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/ArtifactoryUrl",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"1\",\r\n  \"ArtifactoryUrl\": \"http://artifactoryurl/build43\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "592a2522-3070-76fe-bc40-d8479f19bdc1",
          "name": "BuildMilestone",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Correct progressions between milestones\"] =! responseBody.has(\"You cannot progress\");",
                  "",
                  "tests[\"Correct build Record ID\"] =! responseBody.has(\"Could not get the build milestone ID\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildMilestone",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"1\",\r\n  \"BuildMilestone\": \"Automated BVT - In Progress\",\r\n  \"Username\": \"jcollin1\",\r\n  \"Comment\": \"Test comment\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "e209d8e5-675c-d893-826a-6fc7546842e3",
          "name": "BuildMilestoneHistory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildMilestonesRecordId\": { \"type\": \"integer\"},    ",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "                    \"PreviousBuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"NewBuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"Username\": { \"type\": \"string\"},",
                  "                    \"Comment\": { \"type\": \"string\"},",
                  "    \t\t        \"Timestamp\": { \"type\": \"string\" }}",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Response sche,a valid\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildMilestoneHistory?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": "Build milestone history "
          },
          "response": []
        },
        {
          "_postman_id": "bac339b7-1e9a-f64f-feb0-2ec19f022d51",
          "name": "BuildMilestoneProgressions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "var listLength  = jsonData.length;",
                  "",
                  "test_str = { \"items\":{\"type\" : \"string\"} };",
                  "test_int = { \"items\":{\"type\" : \"integer\"}};",
                  "   ",
                  "for( var i = 0 ; i < listLength; i ++)  {",
                  " ",
                  "    var strings = [jsonData[i].BuildMilestoneName];",
                  "    var integers = [jsonData[i].BuildMileStoneId, jsonData[i].BuildMileStoneLevel];",
                  "    tests[\"Valid Schema Milestone \" + i + \" Pass\" ] = (tv4.validate(integers, test_int) && tv4.validate(strings, test_str));",
                  "",
                  "}",
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "tests[\"Valid Build RecordId\"] =! responseBody.has(\"Object reference not set\");",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildMilestoneProgressions?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "5e5d3342-c944-776f-562b-2dee033d07d4",
          "name": "BuildResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid build Record ID\"] =! responseBody.has(\"Can't find a build record\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"1\",\r\n  \"BuildResult\": \"Passed\",\r\n  \"BuildComment\": \"No Quality Gate Violations.\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "eb07f05d-3d8a-4ed1-5600-f31c02bd2fae",
          "name": "HighLevelBuildReport(BuildRecordID)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"MileStone\": {\"type\": \"string\"},",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildStartTime\": { \"type\": \"string\"},",
                  "                    \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },",
                  "    \t\t        \"TestingResult\": { \"type\": \"string\" }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Valid response schema\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/HighLevelBuildReport?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "70243bb3-7fb0-89d0-7d04-ed91f26b0cab",
          "name": "HighLevelBuildReport",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Specified parameters correct\"] =! responseBody.has(\"Could not find a record of a build\");",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "var jsonData = JSON.parse(responseBody); ",
                  "",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"MileStone\": {\"type\": \"string\"},",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildStartTime\": { \"type\": \"string\"},",
                  "                    \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },",
                  "    \t\t        \"TestingResult\": { \"type\": \"string\" }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "if(responseCode.code === 200){",
                  "    tests[\"Valid response schema\"] = tv4.validate(jsonData, test_schema);",
                  "}",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/HighLevelBuildReport?solutionName=Dynamic%Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_UX&componentVersion=11.0&buildNumber=100&branch=trunk",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "58440df8-2c7e-d4d3-0f1a-be92d0725c90",
          "name": "BuildSearch",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Valid build Information\"] =! responseBody.has(\"Could not find build\");",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "test_str = { \"items\":{\"type\" : \"string\"} };",
                  "test_int = { \"items\":{\"type\" : \"integer\"}};",
                  "var strings = [jsonData.ArtifactoryUrl];",
                  "var integers = [jsonData.BuildRecordId, jsonData.BuildNumber];",
                  "",
                  "tests[\"Valid Response schema \"] = (tv4.validate(strings, test_str) && tv4.validate(integers, test_int)); ",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildSearch?solutionName=Dynamic%20Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_UX&componentVersion=11.0&milestone=Released%20to%20QA&useExactMilestone=false",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "144061b9-d5c2-63bf-7d3d-bcec37ad4c01",
          "name": "TestRecord",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid test platform\"] =! responseBody.has(\"Invalid test platform value passed\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Test/TestRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"BuildRecordID\": \"3\",\r\n\t\"TestType\": \"BVT\",\r\n     \"Platform\": \"Linux\",\r\n     \"Architecture\": \"x86\",\r\n\t\"URL\": \"http://your.test.rig/results/build/100/bvt\",\r\n\t\"Suites\": [\r\n\t\t{\r\n\t\t\t\"TestSuiteName\": \"GTI\",\r\n\t\t\t\"TotalNumberOfTests\": \"100\"\r\n\t\t}, \r\n        {\r\n\t\t\t\"TestSuiteName\": \"Logger\",\r\n\t\t\t\"TotalNumberOfTests\": \"14\"\r\n\t\t}\r\n\t]\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "ed5cd7fa-7a7c-ebbe-6da9-aaa52e5432eb",
          "name": "TestCaseResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "tests[\"Test Record ID Valid\"] =! responseBody.has(\"Test Suite specified was not found\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Test/TestCaseResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"TestRecordID\": \"2\",\r\n\t\"TestSuiteName\": \"GTI\",\r\n\t\"TestCaseName\": \"Test good file\",\r\n    \"TestCaseResult\": \"Pass\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "99c067a8-bc14-2989-1112-3816aaee04a0",
          "name": "TestRecordResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"TestRecordId valid\"] = !responseBody.has(\"Can't find a test record for the test record ID\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/test/TestRecordResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"TestRecordID\": \"15\",\r\n  \"TestResult\": \"Failed\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "3a265e96-562d-6544-af3b-4d1f4bfc2d46",
          "name": "TestResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"TestRecordId\": { \"type\": \"integer\"},",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"TestType\": { \"type\": \"string\" },",
                  "    \t\t        \"URL\": { \"type\": \"string\" },",
                  "    \t\t        \"Platform\": { \"type\": \"string\"},",
                  "                    \"Architecture\": { \"type\": \"string\"},",
                  "    \t\t        \"Result\": { \"type\": \"string\" },",
                  "    \t\t        \"TestSuites\": { \"type\": [\"array\",\"null\"] }",
                  "                }",
                  "            }   ",
                  "        };",
                  "tests[\"Valid response schema\"] = tv4.validate(jsonData, test_schema);",
                  "if(tv4.validate(jsonData, test_schema)){",
                  "    ",
                  "    var listLength  = jsonData.length;",
                  "   ",
                  "        for( var i = 0 ; i < listLength; i ++)  {",
                  "        ",
                  "            tests[\"Valid Data in response array element\" + i] = tv4.validate(jsonData[i], test_schema );",
                  "        }",
                  "",
                  "}",
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Test/TestResults?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "56c3f9a1-c1c3-e05c-7511-745443ca1437",
          "name": "QualityGate(Post)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid Quality Gate Name\"] = !responseBody.has(\"An active Quality Gate with this name already exists\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Quality/QualityGate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"Jimmy1223\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"15\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "e65ae8a1-0d83-b9d1-b989-6d313bd7bafd",
          "name": "QualityGateUpdate",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Quality gate specified exists\"] = !responseBody.has(\"The Quality Gate specified to update doesn't seem to exist \");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Quality/QualityGateUpdate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"Jimmy123\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"10\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "c470c6a3-46ef-0fd0-ae2a-5de2e2e7df83",
          "name": "QualityGates",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema ={",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"QualityGateId\": { \"type\": \"integer\"},",
                  "                    \"Name\": { \"type\": \"string\"},",
                  "    \t\t        \"Description\": { \"type\": \"string\" },",
                  "    \t\t        \"Type\": { \"type\": \"string\" },",
                  "                    \"Pass\": { \"type\": \"integer\" },",
                  "    \t\t        \"Fail\": { \"type\": \"integer\" },",
                  "    \t\t        \"Min\": { \"type\": \"integer\" },",
                  "    \t\t        \"Max\": { \"type\": \"integer\"},",
                  "                    \"Active\": { \"type\": \"integer\"}",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Valid response schema\"] = tv4.validate(jsonData[0], test_schema);",
                  "",
                  "for (var i =0; i < jsonData.length ; i ++){",
                  "    tests[\"correct list item \" + i] =  tv4.validate(jsonData[i], test_schema);",
                  "}",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Quality/QualityGates",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "8728297a-6fab-85b2-e294-65909777c636",
          "name": "GlobalyzerResults",
          "request": {
            "url": "http://localhost:2345/api/globalyzer/GlobalyzerResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"Project\":\"Project 1\",\r\n    \"Language\":\"English\",\r\n    \"Version\":\"10.0.0\",\r\n    \"ConfigurationType\":\"Release\",\r\n    \"ReleaseNumber\":\"123\",\r\n    \"ReleaseType\":\"Main\",\r\n    \"SVNBranch\":\"/trunk/main\",\r\n    \"BuildNumber\":\"354\",\r\n    \"Date\":\"12/07/16 12:0:0\",\r\n    \"GlobalyzerProjectName\":\"Test Proj 1\",\r\n    \"GlobalyzerBasePath\":\"C:/Projects/L10N/Test/Globalyzer/Results\",\r\n    \"Scans\":[\r\n        {\r\n            \"Name\":\"JavaScript\",\r\n            \"RuleSetName\":\"Test projects JavaScript rules\",\r\n            \"Language\":\"JavaScript\",\r\n            \"LastScanDate\":\"12/06/16\",\r\n            \"FileCount\":963,\r\n            \"LineCount\":27362,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":1973,\r\n                    \"Ignore\":200,\r\n                    \"Invalid\":195,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":0,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":1290\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":50,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"Name\":\"CPlusPlus\",\r\n            \"RuleSetName\":\"Test projects C++ rules\",\r\n            \"Language\":\"C++\",\r\n            \"LastScanDate\":\"12/7/16\",\r\n            \"FileCount\":1000,\r\n            \"LineCount\":100000,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":500,\r\n                    \"Ignore\":2,\r\n                    \"Invalid\":0,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":600,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":12\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":1234,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
            },
            "description": "GLobalyzer Results"
          },
          "response": []
        }
      ]
    }
  ]
}