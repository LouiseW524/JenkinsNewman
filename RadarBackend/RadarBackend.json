{
  "variables": [],
  "info": {
    "name": "RadarBackend",
    "_postman_id": "f7e60abc-55e4-f74b-6e45-db1c63f23497",
    "description": "",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "4aeabaf7-151f-9912-99e0-0d4a858b433b",
      "name": "RadarBackend(local)",
      "description": "",
      "item": [
        {
          "_postman_id": "674e40ac-9a86-17ed-af7d-1ed98ee9ad69",
          "name": "BuildRecord",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Unique Build Number\"] =! responseBody.has(\"A record already seems to exist \");",
                  "",
                  "tests[\"Build Record Returned\"] = responseBody.has(\"BuildRecordID\")"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Solution\": \"Dynamic Endpoint\",\r\n  \"SolutionVersion\": \"1.0.0\",\r\n  \"Product\": \"ESP\",\r\n  \"ProductVersion\": \"11.0\",\r\n  \"Component\": \"ESP_UX\",\r\n  \"ComponentVersion\": \"11.0\",\r\n  \"BuildNumber\": \"106\",\r\n  \"BuildMilestone\": \"Queued\",\r\n  \"Branch\": \"trunk\",\r\n  \"URL\": \"http://build.orbit.intel.com/job/ESP/job/ESP_CHAIN/job/ESP_UX/101\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "ae15c1c6-7e3c-1805-8d83-8a0f0f841075",
          "name": "BuildRecord(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"SolutionID\": { \"type\": \"integer\"},",
                  "    \t\t        \"ProductID\": { \"type\": \"integer\" },",
                  "    \t\t        \"ComponentID\": { \"type\": \"integer\" },",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"BuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"Timestamp\": { \"type\": \"string\"},",
                  "                    \"BuildURL\": { \"type\": \"string\"},",
                  "    \t\t        \"ArtifactoryURL\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "                    \"BuildComment\": { \"type\": \"string\" },",
                  "    \t\t        \"CodeCoverage\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"BuildSteps\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildRecord?buildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "47904e9e-2fb5-8a20-a5af-5b980c804693",
          "name": "BuildStep",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid BuildRecord Id added\"] =! responseBody.has(\"Expected a non-null integer for property: 'BuildRecordID'\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Build/BuildStep",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"2\",\r\n  \"StepName\": \"Checkout Source\",\r\n  \"StepResult\": \"Pass\"\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "9e2c5727-5f54-5c21-9795-cb7a8458cf4c",
          "name": "VerDirResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "if(responseBody.length > 2){",
                  "var jsonData = JSON.parse(responseBody);",
                  "test_schema = {",
                  "          \"items\":{",
                  "                    \"properties\": {         ",
                  "                    \"Error\": { \"type\": \"string\"}",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Valid BuildRecordId sent\"] = !(tv4.validate(jsonData, test_schema));",
                  "console.log(\"Validation errors: \", tv4.error);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/verdir/VerDirResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"15\",\r\n  \"BuildNumber\": \"100\",\r\n  \"FilesAnalyzed\": \"156\",\r\n  \"FailureCount\": \"5\",\r\n  \"Status\": \"Fail\",\r\n  \"FailureList\": [\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains   unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\PackagingEspSetup\\\\vcredist\\\\vc_redist2015.x86.exe\",\r\n    \"errors\": [ \"Company Name doesn't contain McAfee,  Intel Corporation, or Intel Security\", \"Signature checks excluded  (disabled by command line switch)\" ]},\r\n{\"file\":\"BUILD\\\\ESP\\\\BusinessObjects\\\\MaPkgSupplier\\\\SamplePkg\\\\build\\\\zip.exe\",\r\n    \"errors\": [ \"No version information\", \"ASLR compatibility flag isn't turned on\", \"DEP compatibility flag isn't turned on\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\BLSvcHost.exe\",\r\n    \"errors\": [ \"No version information\" ]}\r\n    ]\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "c837f1b1-544a-563f-efeb-f5c4206b73b5",
          "name": "VerDirResults(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "                    \"FilesAnalyzed\": { \"type\": \"integer\"},",
                  "    \t\t        \"FailureCount\": { \"type\": \"integer\" },",
                  "    \t\t        \"Status\": { \"type\": \"string\" },",
                  "                    \"FailureList\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/verdir/VerDirResults?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "786bfef2-727f-73e0-90b5-1261dc8f20b4",
          "name": "CoverityResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid Build Record ID {exists in DB}\"] = responseBody.has(\"Expected\");",
                  "",
                  "if(!resonseBody.has(\"Expected\")){",
                  "tests[\"Valid Unused Build Record ID\"] = !responseBody.has(\"Coverity results already exist\");",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/coverity/CoverityResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"1\",\r\n  \"FilesAnalyzed\": \"3\",\r\n  \"TotalLOCAnalyzed\": \"3143\",\r\n  \"FunctionsAnalyzed\": \"211\",\r\n  \"PathsAnalyzed\": \"23\",\r\n  \"Duration\": \"00:00:12\",\r\n  \"URL\": \"http://beaappcov1.corp.nai.org\",\r\n  \"NewDefectsFound\": \"3\",\r\n  \"OutstandingDefects\": \"9\",\r\n\r\n  \"DefectsList\": [\r\n    \r\n    {\r\n      \"Cid\": \"120435\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"BUFFER_OVERFLOW\",\r\n      \"Type\": \"Buffer overflow\"\r\n    },\r\n     \r\n    {\r\n      \"Cid\": \"120436\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    },\r\n    \r\n    {\r\n      \"Cid\": \"120437\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\foo.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    }\r\n    ]\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "a7e375b5-b5ed-bea0-0c2e-7c3e96ba0be9",
          "name": "CoverityResults(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"CoverityResultId\": { \"type\": \"integer\"},",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "    \t\t        \"FilesAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"TotalLOCAnalyzed\": { \"type\": \"integer\" },",
                  "                    \"FunctionsAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"PathsAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"Duration\": { \"type\": \"string\" },",
                  "    \t\t        \"URL\": { \"type\": \"string\" },",
                  "    \t\t        \"NewDefectsFound\": { \"type\": \"integer\"},",
                  "                    \"OutstandingDefectsFound\": {\"type\": \"integer\"},",
                  "    \t\t        \"DefectsList\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Return schema valid\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/coverity/CoverityResults?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "a28e13ad-d5a1-26dc-9007-cd19f226c580",
          "name": "ArtifactoryUrl",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid Build Record\"] =! responseBody.has(\"Can't find a build record \");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/ArtifactoryUrl",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"1\",\r\n  \"ArtifactoryUrl\": \"http://artifactoryurl/build43\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "59bd71ab-294b-8431-be56-82ea9dc120b9",
          "name": "BuildMilestone",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Correct progressions between milestones\"] =! responseBody.has(\"You cannot progress\");",
                  "",
                  "tests[\"Correct build Record ID\"] =! responseBody.has(\"Could not get the build milestone ID\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildMilestone",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"1\",\r\n  \"BuildMilestone\": \"Automated BVT - In Progress\",\r\n  \"Username\": \"jcollin1\",\r\n  \"Comment\": \"Test comment\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "dcb6ce09-5e81-7969-91b3-b298f00d9295",
          "name": "BuildMilestoneHistory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildMilestonesRecordId\": { \"type\": \"integer\"},    ",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "                    \"PreviousBuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"NewBuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"Username\": { \"type\": \"string\"},",
                  "                    \"Comment\": { \"type\": \"string\"},",
                  "    \t\t        \"Timestamp\": { \"type\": \"string\" }}",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Testing schema\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildMilestoneHistory?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": "Build milestone history "
          },
          "response": []
        },
        {
          "_postman_id": "ce771935-fbd9-de3a-647d-205ef255f762",
          "name": "BuildMilestoneProgressions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "var listLength  = jsonData.length;",
                  "",
                  "test_str = { \"items\":{\"type\" : \"string\"} };",
                  "test_int = { \"items\":{\"type\" : \"integer\"}};",
                  "   ",
                  "for( var i = 0 ; i < listLength; i ++)  {",
                  " ",
                  "    var strings = [jsonData[i].BuildMilestoneName];",
                  "    var integers = [jsonData[i].BuildMileStoneId, jsonData[i].BuildMileStoneLevel];",
                  "    tests[\"Schema Milestone \" + i + \" Pass\" ] = (tv4.validate(integers, test_int) && tv4.validate(strings, test_str));",
                  "",
                  "}",
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "tests[\"Valid Build RecordId\"] =! responseBody.has(\"Object reference not set\");",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildMilestoneProgressions?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "a460c6ec-76ce-ff4e-dfbe-179149e1d602",
          "name": "BuildResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid build Record ID\"] =! responseBody.has(\"Can't find a build record\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"1\",\r\n  \"BuildResult\": \"Passed\",\r\n  \"BuildComment\": \"No Quality Gate Violations.\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "d59e29a7-f040-b88e-c5bb-9979998ae48f",
          "name": "HighLevelBuildReport(BuildRecordID)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"MileStone\": {\"type\": \"string\"},",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildStartTime\": { \"type\": \"string\"},",
                  "                    \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },",
                  "    \t\t        \"TestingResult\": { \"type\": \"string\" }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Correct response schema\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/HighLevelBuildReport?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "b4df5e35-eda7-403d-075b-b6232cdbe5db",
          "name": "HighLevelBuildReport",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Specified parameters correct\"] =! responseBody.has(\"Could not find a record of a build\");",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "var jsonData = JSON.parse(responseBody); ",
                  "",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"MileStone\": {\"type\": \"string\"},",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildStartTime\": { \"type\": \"string\"},",
                  "                    \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },",
                  "    \t\t        \"TestingResult\": { \"type\": \"string\" }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "if(responseCode.code === 200){",
                  "    tests[\"Correct response schema\"] = tv4.validate(jsonData, test_schema);",
                  "}",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/HighLevelBuildReport?solutionName=Dynamic%Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_UX&componentVersion=11.0&buildNumber=100&branch=trunk",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "8e4df322-6cd2-b75b-d755-c799e84b2273",
          "name": "BuildSearch",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Valid build Information\"] =! responseBody.has(\"Could not find build\");",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "test_str = { \"items\":{\"type\" : \"string\"} };",
                  "test_int = { \"items\":{\"type\" : \"integer\"}};",
                  "var strings = [jsonData.ArtifactoryUrl];",
                  "var integers = [jsonData.BuildRecordId, jsonData.BuildNumber];",
                  "",
                  "",
                  "",
                  " tests[\"Valid Response Values \"] = (tv4.validate(strings, test_str) && tv4.validate(integers, test_int)); ",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/build/BuildSearch?solutionName=Dynamic%20Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_UX&componentVersion=11.0&milestone=Released%20to%20QA&useExactMilestone=false",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "6ab50b6e-6cff-1690-318d-2c9070584298",
          "name": "TestRecord",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Invalid test platform\"] =! responseBody.has(\"Invalid test platform value passed\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Test/TestRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"BuildRecordID\": \"3\",\r\n\t\"TestType\": \"BVT\",\r\n     \"Platform\": \"Linux\",\r\n     \"Architecture\": \"x86\",\r\n\t\"URL\": \"http://your.test.rig/results/build/100/bvt\",\r\n\t\"Suites\": [\r\n\t\t{\r\n\t\t\t\"TestSuiteName\": \"GTI\",\r\n\t\t\t\"TotalNumberOfTests\": \"100\"\r\n\t\t}, \r\n        {\r\n\t\t\t\"TestSuiteName\": \"Logger\",\r\n\t\t\t\"TotalNumberOfTests\": \"14\"\r\n\t\t}\r\n\t]\r\n}\r\n"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "ff3eca44-af21-5504-29aa-cca944f03f53",
          "name": "TestCaseResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "tests[\"Test Record ID Valid\"] =! responseBody.has(\"Test Suite specified was not found\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Test/TestCaseResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"TestRecordID\": \"2\",\r\n\t\"TestSuiteName\": \"GTI\",\r\n\t\"TestCaseName\": \"Test good file\",\r\n    \"TestCaseResult\": \"Pass\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "8929093e-0837-5431-fbdf-04a4662f49bc",
          "name": "TestRecordResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "tests[\"TestRecordId valid\"] = !responseBody.has(\"Can't find a test record for the test record ID\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/test/TestRecordResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"TestRecordID\": \"15\",\r\n  \"TestResult\": \"Failed\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "f7ab3801-3b73-8298-244b-600620de075a",
          "name": "TestResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"TestRecordId\": { \"type\": \"integer\"},",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"TestType\": { \"type\": \"string\" },",
                  "    \t\t        \"URL\": { \"type\": \"string\" },",
                  "    \t\t        \"Platform\": { \"type\": \"string\"},",
                  "                    \"Architecture\": { \"type\": \"string\"},",
                  "    \t\t        \"Result\": { \"type\": \"string\" },",
                  "    \t\t        \"TestSuites\": { \"type\": [\"array\",\"null\"] }",
                  "                }",
                  "            }   ",
                  "        };",
                  "tests[\"Schema is correct\"] = tv4.validate(jsonData, test_schema);",
                  "if(tv4.validate(jsonData, test_schema)){",
                  "    ",
                  "    var listLength  = jsonData.length;",
                  "   ",
                  "        for( var i = 0 ; i < listLength; i ++)  {",
                  "        ",
                  "            tests[\"Valid Data in object\" + i] = tv4.validate(jsonData[i], test_schema );",
                  "        }",
                  "",
                  "}",
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Test/TestResults?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "a930ff58-5705-8a44-5cd5-f8476807dd6b",
          "name": "QualityGate(Post)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "",
                  "",
                  "tests[\"Valid Quality Gate Name\"] = !responseBody.has(\"An active Quality Gate with this name already exists\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Quality/QualityGate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"Jimmy123\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"15\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "cc2290b8-377a-0d6f-750d-fed6a686e886",
          "name": "QualityGateUpdate",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Quality gate specified exists\"] = !responseBody.has(\"The Quality Gate specified to update doesn't seem to exist \");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Quality/QualityGateUpdate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"Jimmy123\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"10\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "73a8f5fa-481f-1356-ed0a-2b7831ac3f3d",
          "name": "QualityGates",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema ={",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"QualityGateId\": { \"type\": \"integer\"},",
                  "                    \"Name\": { \"type\": \"string\"},",
                  "    \t\t        \"Description\": { \"type\": \"string\" },",
                  "    \t\t        \"Type\": { \"type\": \"string\" },",
                  "                    \"Pass\": { \"type\": \"integer\" },",
                  "    \t\t        \"Fail\": { \"type\": \"integer\" },",
                  "    \t\t        \"Min\": { \"type\": \"integer\" },",
                  "    \t\t        \"Max\": { \"type\": \"integer\"},",
                  "                    \"Active\": { \"type\": \"integer\"}",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Testing schema\"] = tv4.validate(jsonData[0], test_schema);",
                  "",
                  "for (var i =0; i < jsonData.length ; i ++){",
                  "    tests[\"correct list item \" + i] =  tv4.validate(jsonData[i], test_schema);",
                  "}",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://localhost:2345/api/Quality/QualityGates",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "fafdd333-c0f2-e163-c3fd-4f13ca940ce4",
          "name": "GlobalyzerResults",
          "request": {
            "url": "http://localhost:2345/api/globalyzer/GlobalyzerResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"Project\":\"Project 1\",\r\n    \"Language\":\"English\",\r\n    \"Version\":\"10.0.0\",\r\n    \"ConfigurationType\":\"Release\",\r\n    \"ReleaseNumber\":\"123\",\r\n    \"ReleaseType\":\"Main\",\r\n    \"SVNBranch\":\"/trunk/main\",\r\n    \"BuildNumber\":\"354\",\r\n    \"Date\":\"12/07/16 12:0:0\",\r\n    \"GlobalyzerProjectName\":\"Test Proj 1\",\r\n    \"GlobalyzerBasePath\":\"C:/Projects/L10N/Test/Globalyzer/Results\",\r\n    \"Scans\":[\r\n        {\r\n            \"Name\":\"JavaScript\",\r\n            \"RuleSetName\":\"Test projects JavaScript rules\",\r\n            \"Language\":\"JavaScript\",\r\n            \"LastScanDate\":\"12/06/16\",\r\n            \"FileCount\":963,\r\n            \"LineCount\":27362,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":1973,\r\n                    \"Ignore\":200,\r\n                    \"Invalid\":195,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":0,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":1290\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":50,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"Name\":\"CPlusPlus\",\r\n            \"RuleSetName\":\"Test projects C++ rules\",\r\n            \"Language\":\"C++\",\r\n            \"LastScanDate\":\"12/7/16\",\r\n            \"FileCount\":1000,\r\n            \"LineCount\":100000,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":500,\r\n                    \"Ignore\":2,\r\n                    \"Invalid\":0,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":600,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":12\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":1234,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
            },
            "description": "GLobalyzer Results"
          },
          "response": []
        },
        {
          "_postman_id": "faa51149-45eb-1e72-3442-5c2e3c55e26d",
          "name": "CodeCoverage",
          "request": {
            "url": "http://localhost:2345/api/build/CodeCoverage",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"20\",\r\n  \"Coverage\": \"77%\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "44eda009-162e-de82-538d-cdf66a8b7368",
          "name": "BuildMilestone(GET)",
          "request": {
            "url": "http://localhost:2345/api/build/BuildMilestone",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "779a4262-f43d-cb28-07fb-64e204d44bc3",
          "name": "HighLevelBuildReportsForComponent",
          "request": {
            "url": "http://localhost:2345/api/build/HighLevelBuildReportsForComponent?solutionName=Dynamic%20Endpoint&solutionVersion=3.0.0&productName=ESP&productVersion=11.0&componentName=ESP&componentVersion=11.0",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "7235e0c4-6b4f-746b-4961-d1d49b05814a",
      "name": "RadarBackend(DevRadar)",
      "description": "",
      "item": [
        {
          "_postman_id": "c827f6ee-4160-989e-242d-3f475226e98e",
          "name": "BuildRecord",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Solution\": \"Dynamic Endpoint\",\r\n  \"SolutionVersion\": \"1.0.0\",\r\n  \"Product\": \"ESP\",\r\n  \"ProductVersion\": \"11.0\",\r\n  \"Component\": \"ESP_UX\",\r\n  \"ComponentVersion\": \"11.0\",\r\n  \"BuildNumber\": \"102\",\r\n  \"BuildMilestone\": \"Queued\",\r\n  \"Branch\": \"trunk\",\r\n  \"URL\": \"http://build.orbit.intel.com/job/ESP/job/ESP_CHAIN/job/ESP_UX/100\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "f6254854-7745-cc85-cab4-ae2a74c1f219",
          "name": "BuildRecord(GET)",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildRecord?buildRecordId=46",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "4b06f1ef-1b7c-5aab-abf7-625354ca78cb",
          "name": "BuildStep",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/CodeCoverage",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordId\": \"10\",\r\n  \"StepName\": \"Compilation\",\r\n  \"StepResult\": \"Pass\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "6f967691-9b32-5e2a-119b-e929dc95e05d",
          "name": "VerDirResults",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/verdir/VerDirResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"43\",\r\n  \"BuildNumber\": \"101\",\r\n  \"FilesAnalyzed\": \"10\",\r\n  \"FailureCount\": \"5\",\r\n  \"Status\": \"Fail\",\r\n  \r\n  \"FailureList\": [\r\n    \r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains   unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\PackagingEspSetup\\\\vcredist\\\\vc_redist2015.x86.exe\",\r\n    \"errors\": [ \"Company Name doesn't contain McAfee,  Intel Corporation, or Intel Security\", \"Signature checks excluded  (disabled by command line switch)\" ]},\r\n{\"file\":\"BUILD\\\\ESP\\\\BusinessObjects\\\\MaPkgSupplier\\\\SamplePkg\\\\build\\\\zip.exe\",\r\n    \"errors\": [ \"No version information\", \"ASLR compatibility flag isn't turned on\", \"DEP compatibility flag isn't turned on\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\BLSvcHost.exe\",\r\n    \"errors\": [ \"No version information\" ]}\r\n    ]\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "f33be4bc-3099-7ca1-c43b-5d207959bda2",
          "name": "VerDirResults(GET)",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/verdir/VerDirResults?BuildRecordId=43",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "fdee0ab9-6ab8-8a5f-a738-379d0bb1b9f3",
          "name": "CoverityResults",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/coverity/CoverityResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"43\",\r\n  \"FilesAnalyzed\": \"3\",\r\n  \"TotalLOCAnalyzed\": \"3143\",\r\n  \"FunctionsAnalyzed\": \"211\",\r\n  \"PathsAnalyzed\": \"23\",\r\n  \"Duration\": \"00:00:12\",\r\n  \"URL\": \"http://beaappcov1.corp.nai.org\",\r\n  \"NewDefectsFound\": \"3\",\r\n  \"OutstandingDefects\": \"9\",\r\n  \r\n  \"DefectsList\": [\r\n    \r\n    {\r\n      \"Cid\": \"120435\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"BUFFER_OVERFLOW\",\r\n      \"Type\": \"Buffer overflow\"\r\n    },\r\n     \r\n    {\r\n      \"Cid\": \"120436\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    },\r\n    \r\n    {\r\n      \"Cid\": \"120437\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\foo.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    }\r\n\r\n    ]\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "f68c2531-f906-09f6-de40-9cfae098fb35",
          "name": "CoverityResults(GET)",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/coverity/CoverityResults?BuildRecordId=43",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "c7fdc301-b4b9-367e-0406-c077d2985655",
          "name": "ArtifactoryUrl",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/ArtifactoryUrl",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"43\",\r\n  \"ArtifactoryUrl\": \"http://artifactoryurl/build43\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "95a0bc7d-f19d-028e-6a01-bf49169aaa25",
          "name": "BuildMilestone",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestone",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"112\",\r\n  \"BuildMilestone\": \"Released to QA\",\r\n  \"Username\": \"jcollin1\",\r\n  \"Comment\": \"Test comment\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "e8b2f693-8735-96fe-1d76-a570be65ee0a",
          "name": "BuildMilestoneHistory",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestoneHistory?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": "Build milestone history "
          },
          "response": []
        },
        {
          "_postman_id": "3c3cff96-871f-a263-343a-25ae29bb4153",
          "name": "BuildMilestoneProgressions",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestoneProgressions?BuildRecordId=108",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "3278acec-ba41-cc5c-5a65-037abbc16d71",
          "name": "BuildResult",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"43\",\r\n  \"BuildResult\": \"Passed\",\r\n  \"BuildComment\": \"No Quality Gate Violations.\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "059fbb00-621d-2cbe-a635-4544490c382e",
          "name": "HighLevelBuildReport(BuildRecordID)",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReport?BuildRecordId=111",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "c0511c9f-4abd-f0a7-9be9-9e9a8dbd1981",
          "name": "HighLevelBuildReport",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReport?solutionName=Dynamic%20Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_UX&componentVersion=11.0&buildNumber=780&branch=trunk",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "74dae40d-8273-946e-574d-79879ebb7736",
          "name": "BuildSearch",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildSearch?solutionName=Dynamic%20Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_INSTALLER&componentVersion=11.0&milestone=Released%20to%20qa&useExactMilestone=false",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "eb6a3711-02ad-6f7b-79a8-58251a46c122",
          "name": "TestRecord",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/Test/TestRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"BuildRecordID\": \"110\",\r\n\t\"TestType\": \"BVT\",\r\n    \"Platform\": \"Windows\",\r\n    \"Architecture\": \"x86\",\r\n\t\"URL\": \"http://your.test.rig/results/build/100/bvt\",\r\n\r\n\t\"Suites\": [\r\n\r\n\t\t{\r\n\t\t\t\"TestSuiteName\": \"GTI\",\r\n\t\t\t\"TotalNumberOfTests\": \"100\"\r\n\t\t}, \r\n        {\r\n\t\t\t\"TestSuiteName\": \"Logger\",\r\n\t\t\t\"TotalNumberOfTests\": \"14\"\r\n\t\t}\r\n\r\n\t]\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "f6ce718f-f63b-38a5-0d24-1046c8c32212",
          "name": "TestCaseResult",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/Test/TestCaseResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"TestRecordID\": \"7\",\r\n\t\"TestSuiteName\": \"GTI\",\r\n\t\"TestCaseName\": \"Test good file\",\r\n    \"TestCaseResult\": \"Pass\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "e4dd14fe-8e16-2e58-896b-ad8729394581",
          "name": "TestRecordResult",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/test/TestRecordResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"TestRecordID\": \"28\",\r\n  \"TestResult\": \"Failed\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "e0a49c38-06ef-f3a6-3b17-f8af8a95bf6a",
          "name": "TestResults",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/Test/TestResults?BuildRecordId=43",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "1d66c6fa-67d3-0555-9888-45e7d40fa392",
          "name": "QualityGate(Post)",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/Quality/QualityGate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"Jimmy\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"15\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "d1038ec0-1508-18f1-faf0-206a094055bf",
          "name": "QualityGateUpdate",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/Quality/QualityGateUpdate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"VerDir\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"10\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "9eadf0a0-86ed-3ff5-49d3-94a80c36c841",
          "name": "QualityGates",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/Quality/QualityGates",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "6171388c-f2f6-1f98-622a-785ff87f822d",
          "name": "GlobalyzerResults",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/globalyzer/GlobalyzerResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"Project\":\"Project 1\",\r\n    \"Language\":\"English\",\r\n    \"Version\":\"10.0.0\",\r\n    \"ConfigurationType\":\"Release\",\r\n    \"ReleaseNumber\":\"123\",\r\n    \"ReleaseType\":\"Main\",\r\n    \"SVNBranch\":\"/trunk/main\",\r\n    \"BuildNumber\":\"354\",\r\n    \"Date\":\"12/07/16 12:0:0\",\r\n    \"GlobalyzerProjectName\":\"Test Proj 1\",\r\n    \"GlobalyzerBasePath\":\"C:/Projects/L10N/Test/Globalyzer/Results\",\r\n    \"Scans\":[\r\n        {\r\n            \"Name\":\"JavaScript\",\r\n            \"RuleSetName\":\"Test projects JavaScript rules\",\r\n            \"Language\":\"JavaScript\",\r\n            \"LastScanDate\":\"12/06/16\",\r\n            \"FileCount\":963,\r\n            \"LineCount\":27362,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":1973,\r\n                    \"Ignore\":200,\r\n                    \"Invalid\":195,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":0,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":1290\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":50,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"Name\":\"CPlusPlus\",\r\n            \"RuleSetName\":\"Test projects C++ rules\",\r\n            \"Language\":\"C++\",\r\n            \"LastScanDate\":\"12/7/16\",\r\n            \"FileCount\":1000,\r\n            \"LineCount\":100000,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":500,\r\n                    \"Ignore\":2,\r\n                    \"Invalid\":0,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":600,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":12\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":1234,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
            },
            "description": "GLobalyzer Results"
          },
          "response": []
        },
        {
          "_postman_id": "dbe868e0-66b2-d8f5-56fd-3704ebae0b4c",
          "name": "CodeCoverage",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/CodeCoverage",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"20\",\r\n  \"Coverage\": \"77%\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "fff1a028-3303-1922-4e78-3283750ce9ee",
          "name": "BuildMilestone(GET)",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/BuildMilestone",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "1cea0095-708d-cac4-f7a3-d59a727d2429",
          "name": "HighLevelBuildReportsForComponent",
          "request": {
            "url": "http://devradar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReportsForComponent?solutionName=Dynamic%20Endpoint&solutionVersion=3.0.0&productName=ESP&productVersion=11.0&componentName=ESP&componentVersion=11.0",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "e2b6f9eb-9cbb-c18c-cf0a-33c1af39d139",
      "name": "RadarBackend(Radar)",
      "description": "",
      "item": [
        {
          "_postman_id": "e5e6c188-8bc1-5616-4377-84c9bb44d60c",
          "name": "BuildRecord",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Unique Build Number\"] =! responseBody.has(\"A record already seems to exist \");",
                  "",
                  "tests[\"Build Record Returned\"] = responseBody.has(\"BuildRecordID\")"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/BuildRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Solution\": \"Dynamic Endpoint\",\r\n  \"SolutionVersion\": \"1.0.0\",\r\n  \"Product\": \"ESP\",\r\n  \"ProductVersion\": \"11.0\",\r\n  \"Component\": \"ESP_UX\",\r\n  \"ComponentVersion\": \"11.0\",\r\n  \"BuildNumber\": \"100\",\r\n  \"BuildMilestone\": \"Queued\",\r\n  \"Branch\": \"trunk\",\r\n  \"URL\": \"http://build.orbit.intel.com/job/ESP/job/ESP_CHAIN/job/ESP_UX/100\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "088a64b6-64b0-b000-52e8-3899f70ae195",
          "name": "BuildRecord(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"SolutionID\": { \"type\": \"integer\"},",
                  "    \t\t        \"ProductID\": { \"type\": \"integer\" },",
                  "    \t\t        \"ComponentID\": { \"type\": \"integer\" },",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"BuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"Timestamp\": { \"type\": \"string\"},",
                  "                    \"BuildURL\": { \"type\": \"string\"},",
                  "    \t\t        \"ArtifactoryURL\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "                    \"BuildComment\": { \"type\": \"string\" },",
                  "    \t\t        \"CodeCoverage\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"BuildSteps\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Testing schema\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/BuildRecord?buildRecordId=46",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "f47c3ee7-13d3-aa20-ee1a-446740936e3e",
          "name": "BuildStep",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid BuildRecord Id added\"] =! responseBody.has(\"Expected a non-null integer for property: 'BuildRecordID'\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/CodeCoverage",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordId\": \"10\",\r\n  \"StepName\": \"Compilation\",\r\n  \"StepResult\": \"Pass\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "9e5f9197-19f0-03fd-7c11-84e67bdd566a",
          "name": "VerDirResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "if(responseBody.length > 2){",
                  "var jsonData = JSON.parse(responseBody);",
                  "test_schema = {",
                  "          \"items\":{",
                  "                    \"properties\": {         ",
                  "                    \"Error\": { \"type\": \"string\"}",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Unique BuildRecordId sent\"] = !(tv4.validate(jsonData, test_schema));",
                  "console.log(\"Validation errors: \", tv4.error);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/verdir/VerDirResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"43\",\r\n  \"BuildNumber\": \"101\",\r\n  \"FilesAnalyzed\": \"10\",\r\n  \"FailureCount\": \"5\",\r\n  \"Status\": \"Fail\",\r\n  \r\n  \"FailureList\": [\r\n    \r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains   unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\EmBlEventViewStr.dll\",\r\n    \"errors\": [ \"Signature checks excluded  (disabled by command line switch)\", \"File contains unrecognised debug information type 13\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\PackagingEspSetup\\\\vcredist\\\\vc_redist2015.x86.exe\",\r\n    \"errors\": [ \"Company Name doesn't contain McAfee,  Intel Corporation, or Intel Security\", \"Signature checks excluded  (disabled by command line switch)\" ]},\r\n{\"file\":\"BUILD\\\\ESP\\\\BusinessObjects\\\\MaPkgSupplier\\\\SamplePkg\\\\build\\\\zip.exe\",\r\n    \"errors\": [ \"No version information\", \"ASLR compatibility flag isn't turned on\", \"DEP compatibility flag isn't turned on\" ]},\r\n    {\"file\":\"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\Win32\\\\BLSvcHost.exe\",\r\n    \"errors\": [ \"No version information\" ]}\r\n    ]\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "3aaf530f-df29-964f-369a-7c0d0931c3c3",
          "name": "VerDirResults(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "                    \"FilesAnalyzed\": { \"type\": \"integer\"},",
                  "    \t\t        \"FailureCount\": { \"type\": \"integer\" },",
                  "    \t\t        \"Status\": { \"type\": \"string\" },",
                  "                    \"FailureList\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Testing schema\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/verdir/VerDirResults?BuildRecordId=43",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "620ffba5-87f8-f6ff-119c-e1740b2b7037",
          "name": "CoverityResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid Build Record ID {exists in DB}\"] = responseBody.has(\"Expected\");",
                  "",
                  "if(!resonseBody.has(\"Expected\")){",
                  "tests[\"Valid Unused Build Record ID\"] = !responseBody.has(\"Coverity results already exist\");",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/coverity/CoverityResults",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"43\",\r\n  \"FilesAnalyzed\": \"3\",\r\n  \"TotalLOCAnalyzed\": \"3143\",\r\n  \"FunctionsAnalyzed\": \"211\",\r\n  \"PathsAnalyzed\": \"23\",\r\n  \"Duration\": \"00:00:12\",\r\n  \"URL\": \"http://beaappcov1.corp.nai.org\",\r\n  \"NewDefectsFound\": \"3\",\r\n  \"OutstandingDefects\": \"9\",\r\n  \r\n  \"DefectsList\": [\r\n    \r\n    {\r\n      \"Cid\": \"120435\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"BUFFER_OVERFLOW\",\r\n      \"Type\": \"Buffer overflow\"\r\n    },\r\n     \r\n    {\r\n      \"Cid\": \"120436\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\EmBlEventViewStr.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    },\r\n    \r\n    {\r\n      \"Cid\": \"120437\",\r\n      \"Severity\": \"unspecified\",\r\n      \"Classification\": \"unclassified\",\r\n      \"Impact\": \"undecided\",\r\n      \"File\": \"BUILD\\\\ESP\\\\BuildResults\\\\Release\\\\x64\\\\foo.cpp\",\r\n      \"Category\": \"FORWARD_NULL\",\r\n      \"Type\": \"Deferencing Null Pointer pi\"\r\n    }\r\n\r\n    ]\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "d2010d52-7636-cfe6-04f9-90a8d310d5de",
          "name": "CoverityResults(GET)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"CoverityResultId\": { \"type\": \"integer\"},",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "    \t\t        \"FilesAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"TotalLOCAnalyzed\": { \"type\": \"integer\" },",
                  "                    \"FunctionsAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"PathsAnalyzed\": { \"type\": \"integer\" },",
                  "    \t\t        \"Duration\": { \"type\": \"string\" },",
                  "    \t\t        \"URL\": { \"type\": \"string\" },",
                  "    \t\t        \"NewDefectsFound\": { \"type\": \"integer\"},",
                  "                    \"OutstandingDefectsFound\": {\"type\": \"integer\"},",
                  "    \t\t        \"DefectsList\": { \"type\": [\"array\",\"null\"] }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Schema Valid Response\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/coverity/CoverityResults?BuildRecordId=43",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "aed01e6d-3a2e-feee-5178-e6ebb7246a73",
          "name": "ArtifactoryUrl",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid Build Record\"] =! responseBody.has(\"Can't find a build record \");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/ArtifactoryUrl",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"43\",\r\n  \"ArtifactoryUrl\": \"http://artifactoryurl/build43\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "281dca85-b96f-6307-1de4-d51a4c26169b",
          "name": "BuildMilestone",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Correct progressions between milestones\"] =! responseBody.has(\"You cannot progress\");",
                  "",
                  "tests[\"Correct build Record ID\"] =! responseBody.has(\"Could not get the build milestone ID\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/BuildMilestone",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"BuildRecordID\": \"112\",\r\n  \"BuildMilestone\": \"Released to QA\",\r\n  \"Username\": \"jcollin1\",\r\n  \"Comment\": \"Test comment\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "380e2ca7-76ae-c5d4-8797-4d2a85b5543d",
          "name": "BuildMilestoneHistory",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildMilestonesRecordId\": { \"type\": \"integer\"},    ",
                  "                    \"BuildRecordId\": { \"type\": \"integer\"},",
                  "                    \"PreviousBuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"NewBuildMilestone\": { \"type\": \"string\" },",
                  "    \t\t        \"Username\": { \"type\": \"string\"},",
                  "                    \"Comment\": { \"type\": \"string\"},",
                  "    \t\t        \"Timestamp\": { \"type\": \"string\" }}",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Testing schema\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/BuildMilestoneHistory?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": "Build milestone history "
          },
          "response": []
        },
        {
          "_postman_id": "5e370e29-2811-f698-c16e-e0ad5df607b9",
          "name": "BuildMilestoneProgressions",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "var listLength  = jsonData.length;",
                  "",
                  "test_str = { \"items\":{\"type\" : \"string\"} };",
                  "test_int = { \"items\":{\"type\" : \"integer\"}};",
                  "   ",
                  "for( var i = 0 ; i < listLength; i ++)  {",
                  " ",
                  "    var strings = [jsonData[i].BuildMilestoneName];",
                  "    var integers = [jsonData[i].BuildMileStoneId, jsonData[i].BuildMileStoneLevel];",
                  "    tests[\"Schema Milestone \" + i + \" Pass\" ] = (tv4.validate(integers, test_int) && tv4.validate(strings, test_str));",
                  "",
                  "}",
                  "",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "tests[\"Valid Build RecordId\"] =! responseBody.has(\"Object reference not set\");",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/BuildMilestoneProgressions?BuildRecordId=108",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "652710a3-19ff-c378-2d30-0532229faf36",
          "name": "BuildResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Valid build Record ID\"] =! responseBody.has(\"Can't find a build record\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/BuildResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"43\",\r\n  \"BuildResult\": \"Passed\",\r\n  \"BuildComment\": \"No Quality Gate Violations.\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "229ac75b-91e9-ba45-c416-f33ffeff50d7",
          "name": "HighLevelBuildReport(BuildRecordID)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"MileStone\": {\"type\": \"string\"},",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildStartTime\": { \"type\": \"string\"},",
                  "                    \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },",
                  "    \t\t        \"TestingResult\": { \"type\": \"string\" }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Correct response schema\"] = tv4.validate(jsonData, test_schema);",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReport?BuildRecordId=1",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"Project\":\"Project 1\",\r\n    \"Language\":\"English\",\r\n    \"Version\":\"10.0.0\",\r\n    \"ConfigurationType\":\"Release\",\r\n    \"ReleaseNumber\":\"123\",\r\n    \"ReleaseType\":\"Main\",\r\n    \"SVNBranch\":\"/trunk/main\",\r\n    \"BuildNumber\":\"354\",\r\n    \"Date\":\"12/07/16 12:0:0\",\r\n    \"GlobalyzerProjectName\":\"Test Proj 1\",\r\n    \"GlobalyzerBasePath\":\"C:/Projects/L10N/Test/Globalyzer/Results\",\r\n    \"Scans\":[\r\n        {\r\n            \"Name\":\"JavaScript\",\r\n            \"RuleSetName\":\"Test projects JavaScript rules\",\r\n            \"Language\":\"JavaScript\",\r\n            \"LastScanDate\":\"12/06/16\",\r\n            \"FileCount\":963,\r\n            \"LineCount\":27362,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":1973,\r\n                    \"Ignore\":200,\r\n                    \"Invalid\":195,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":0,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":1290\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":50,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"Name\":\"CPlusPlus\",\r\n            \"RuleSetName\":\"Test projects C++ rules\",\r\n            \"Language\":\"C++\",\r\n            \"LastScanDate\":\"12/7/16\",\r\n            \"FileCount\":1000,\r\n            \"LineCount\":100000,\r\n            \"Results\":[\r\n                {\r\n                    \"Type\":\"Embedded Strings\",\r\n                    \"Active\":500,\r\n                    \"Ignore\":2,\r\n                    \"Invalid\":0,\r\n                    \"StickyIgnore\":0,\r\n                    \"Resolved\":600,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":12\r\n                },\r\n                {\r\n                    \"Type\":\"Locale sensitive methods\",\r\n                    \"Active\":1234,\r\n                    \"Ignore\":20,\r\n                    \"Invalid\":10,\r\n                    \"StickyIgnore\":10,\r\n                    \"Resolved\":50,\r\n                    \"Todo\":0,\r\n                    \"Filtered\":122\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
            },
            "description": "GLobalyzer Results"
          },
          "response": []
        },
        {
          "_postman_id": "489ae6d2-8c3d-4420-8b29-cac79192f77b",
          "name": "HighLevelBuildReport",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Specified parameters correct\"] =! responseBody.has(\"Could not find a record of a build\");",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "var jsonData = JSON.parse(responseBody); ",
                  "",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"BuildNumber\": { \"type\": \"integer\" },",
                  "    \t\t        \"Branch\": { \"type\": \"string\" },",
                  "    \t\t        \"MileStone\": {\"type\": \"string\"},",
                  "    \t\t        \"BuildResult\": { \"type\": \"string\" },",
                  "    \t\t        \"BuildStartTime\": { \"type\": \"string\"},",
                  "                    \"OpenBugzillaDefects\": { \"type\": \"integer\"},",
                  "    \t\t        \"CoverityOutstandingDefects\": { \"type\": [\"integer\", \"null\"] },",
                  "    \t\t        \"VerDirFailures\": { \"type\": \"integer\" },",
                  "    \t\t        \"TestingResult\": { \"type\": \"string\" }",
                  "                    }",
                  "        }   ",
                  "    };",
                  "if(responseCode.code === 200){",
                  "    tests[\"Correct response schema\"] = tv4.validate(jsonData, test_schema);",
                  "}",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReport?solutionName=Dynamic%20Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_UX&componentVersion=11.0&buildNumber=780&branch=trunk",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "35ea1e16-1277-af35-e35e-8ca02a4f6c18",
          "name": "BuildSearch",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "tests[\"Valid build Information\"] =! responseBody.has(\"Could not find build\");",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "test_str = { \"items\":{\"type\" : \"string\"} };",
                  "test_int = { \"items\":{\"type\" : \"integer\"}};",
                  "var strings = [jsonData.ArtifactoryUrl];",
                  "var integers = [jsonData.BuildRecordId, jsonData.BuildNumber];",
                  "",
                  "",
                  "",
                  " tests[\"Valid Response Values \"] = (tv4.validate(strings, test_str) && tv4.validate(integers, test_int)); ",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/BuildSearch?solutionName=Dynamic%20Endpoint&solutionVersion=1.0.0&productName=ESP&productVersion=11.0&componentName=ESP_INSTALLER&componentVersion=11.0&milestone=Released%20to%20qa&useExactMilestone=false",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "0ca45438-0a41-55fd-4b46-9a20e5fd85dc",
          "name": "TestRecord",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Invalid test platform\"] =! responseBody.has(\"Invalid test platform value passed\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/Test/TestRecord",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"BuildRecordID\": \"110\",\r\n\t\"TestType\": \"BVT\",\r\n    \"Platform\": \"Windows\",\r\n    \"Architecture\": \"x86\",\r\n\t\"URL\": \"http://your.test.rig/results/build/100/bvt\",\r\n\r\n\t\"Suites\": [\r\n\r\n\t\t{\r\n\t\t\t\"TestSuiteName\": \"GTI\",\r\n\t\t\t\"TotalNumberOfTests\": \"100\"\r\n\t\t}, \r\n        {\r\n\t\t\t\"TestSuiteName\": \"Logger\",\r\n\t\t\t\"TotalNumberOfTests\": \"14\"\r\n\t\t}\r\n\r\n\t]\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "0a959db9-7322-aeae-341d-a33ab37daa29",
          "name": "TestCaseResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "tests[\"Test Record ID Valid\"] =! responseBody.has(\"Test Suite specified was not found\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/Test/TestCaseResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n\t\"TestRecordID\": \"7\",\r\n\t\"TestSuiteName\": \"GTI\",\r\n\t\"TestCaseName\": \"Test good file\",\r\n    \"TestCaseResult\": \"Pass\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "c241afc5-450e-4ae4-32dc-d581515f0e50",
          "name": "TestRecordResult",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "tests[\"TestRecordId valid\"] = !responseBody.has(\"Can't find a test record for the test record ID\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/test/TestRecordResult",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"TestRecordID\": \"28\",\r\n  \"TestResult\": \"Failed\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "0c75b3ce-beaa-7c73-973b-eb72e527fc57",
          "name": "TestResults",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "",
                  "test_schema = {",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"TestRecordId\": { \"type\": \"integer\"},",
                  "                    \"BuildRecordID\": { \"type\": \"integer\"},",
                  "                    \"TestType\": { \"type\": \"string\" },",
                  "    \t\t        \"URL\": { \"type\": \"string\" },",
                  "    \t\t        \"Platform\": { \"type\": \"string\"},",
                  "                    \"Architecture\": { \"type\": \"string\"},",
                  "    \t\t        \"Result\": { \"type\": \"string\" },",
                  "    \t\t        \"TestSuites\": { \"type\": [\"array\",\"null\"] }",
                  "                }",
                  "            }   ",
                  "        };",
                  "tests[\"Schema is correct\"] = tv4.validate(jsonData, test_schema);",
                  "if(tv4.validate(jsonData, test_schema)){",
                  "    ",
                  "    var listLength  = jsonData.length;",
                  "   ",
                  "        for( var i = 0 ; i < listLength; i ++)  {",
                  "        ",
                  "            tests[\"Valid Data in object\" + i] = tv4.validate(jsonData[i], test_schema );",
                  "        }",
                  "",
                  "}",
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/Test/TestResults?BuildRecordId=43",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "7e945c3b-b03d-717f-91d4-94976aca0eb5",
          "name": "QualityGate(Post)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "",
                  "",
                  "",
                  "tests[\"Valid Quality Gate Name\"] = !responseBody.has(\"An active Quality Gate with this name already exists\");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/Quality/QualityGate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"Jimmy\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"15\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "3aa6e63d-4592-1b63-cec4-c38ee3da548b",
          "name": "QualityGateUpdate",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "",
                  "tests[\"Quality gate specified exists\"] = !responseBody.has(\"The Quality Gate specified to update doesn't seem to exist \");"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/Quality/QualityGateUpdate",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"Name\": \"VerDir\",\r\n  \"Description\": \"# of defects found\",\r\n  \"Type\": \"count\",\r\n  \"Pass\": \"0\",\r\n  \"Fail\": \"10\",\r\n  \"Min\": \"0\",\r\n  \"Max\": \"100\",\r\n  \"Active\": \"1\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "67041e52-1f43-a8b8-ca17-bfb391e0f71c",
          "name": "QualityGates",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody); ",
                  "tests[\"Status code is 200\"] = responseCode.code === 200;",
                  "tests[\"Response body has content\"] = (responseBody.length > 2);",
                  "test_schema ={",
                  "  ",
                  "        \"items\":{",
                  "                  ",
                  "                    \"properties\": {         ",
                  "                    \"QualityGateId\": { \"type\": \"integer\"},",
                  "                    \"Name\": { \"type\": \"string\"},",
                  "    \t\t        \"Description\": { \"type\": \"string\" },",
                  "    \t\t        \"Type\": { \"type\": \"string\" },",
                  "                    \"Pass\": { \"type\": \"integer\" },",
                  "    \t\t        \"Fail\": { \"type\": \"integer\" },",
                  "    \t\t        \"Min\": { \"type\": \"integer\" },",
                  "    \t\t        \"Max\": { \"type\": \"integer\"},",
                  "                    \"Active\": { \"type\": \"integer\"}",
                  "                    }",
                  "        }   ",
                  "    };",
                  "",
                  "tests[\"Testing schema\"] = tv4.validate(jsonData[0], test_schema);",
                  "",
                  "for (var i =0; i < jsonData.length ; i ++){",
                  "    tests[\"correct list item \" + i] =  tv4.validate(jsonData[i], test_schema);",
                  "}",
                  "console.log(\"Validation errors: \", tv4.error);"
                ]
              }
            }
          ],
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/Quality/QualityGates",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "5f795be2-9192-f01f-e3c6-182ac38d24bb",
          "name": "CodeCoverage",
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/CodeCoverage",
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ \r\n  \"BuildRecordID\": \"20\",\r\n  \"Coverage\": \"77%\"\r\n}"
            },
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "57e888fb-ae94-cb05-2cc0-475675f369b0",
          "name": "HighLevelBuildReportsForComponent",
          "request": {
            "url": "http://radar.orbit.intel.com:8080/v1/api/build/HighLevelBuildReportsForComponent?solutionName=Dynamic%20Endpoint&solutionVersion=3.0.0&productName=ESP&productVersion=11.0&componentName=ESP&componentVersion=11.0",
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "description": ""
              }
            ],
            "body": {},
            "description": ""
          },
          "response": []
        }
      ]
    }
  ]
}